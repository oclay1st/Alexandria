/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/usr/include/poppler/Annot.h", 
            "/usr/include/poppler/CharTypes.h", 
            "/usr/include/poppler/Dict.h", 
            "/usr/include/poppler/GlobalParams.h", 
            "/usr/include/poppler/Object.h", 
            "/usr/include/poppler/OutputDev.h", 
            "/usr/include/poppler/PDFDoc.h", 
            "/usr/include/poppler/PDFDocFactory.h", 
            "/usr/include/poppler/Page.h", 
            "/usr/include/poppler/SplashOutputDev.h", 
            "/usr/include/poppler/TextOutputDev.h", 
            "/usr/include/poppler/UTF.h", 
            "/usr/include/poppler/goo/GooString.h", 
            "/usr/include/poppler/splash/SplashBitmap.h", 
            "/usr/include/poppler/splash/SplashTypes.h"
        ], 
        "include_dirs": [
            "/usr/include/poppler"
        ], 
        "language": "c++", 
        "libraries": [
            "poppler"
        ]
    }, 
    "module_name": "poppler"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__project__modules__utils__parsers__pdf__poppler
#define __PYX_HAVE_API__project__modules__utils__parsers__pdf__poppler
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include "GlobalParams.h"
#include "goo/GooString.h"
#include "OutputDev.h"
#include "Annot.h"
#include "Page.h"
#include "Dict.h"
#include "Object.h"
#include "PDFDoc.h"
#include "PDFDocFactory.h"
#include "TextOutputDev.h"
#include "CharTypes.h"
#include "UTF.h"
#include "splash/SplashTypes.h"
#include "splash/SplashBitmap.h"
#include "SplashOutputDev.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "project/modules/utils/parsers/pdf/poppler.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/* "project/modules/utils/parsers/pdf/poppler.pyx":8
 * from math import ceil
 * 
 * ctypedef bool GBool             # <<<<<<<<<<<<<<
 * DEF PRECISION=1e-6
 * 
 */
typedef bool __pyx_t_7project_7modules_5utils_7parsers_3pdf_7poppler_GBool;

/*--- Type declarations ---*/
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text;
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr;

/* "project/modules/utils/parsers/pdf/poppler.pyx":170
 * cdef double RESOLUTION = 72.0
 * 
 * cdef class Document:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PDFDoc *_doc
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document {
  PyObject_HEAD
  struct __pyx_vtabstruct_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_vtab;
  PDFDoc *_doc;
  int _pg;
  int _max_pages;
  PyBoolObject *phys_layout;
  double fixed_pitch;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":293
 *         return self.get_page(self._pg)
 * 
 * cdef class PDFPage:             # <<<<<<<<<<<<<<
 *     cdef:
 *         int page_no
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage {
  PyObject_HEAD
  int page_no;
  TextPage *page;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *doc;
  TextFlow *curr_flow;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":329
 *             return self.page_no
 * 
 * cdef class Flow:             # <<<<<<<<<<<<<<
 *     cdef:
 *         TextFlow *flow
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow {
  PyObject_HEAD
  TextFlow *flow;
  TextBlock *curr_block;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":349
 *         return b
 * 
 * cdef class Block:             # <<<<<<<<<<<<<<
 *     cdef:
 *         TextBlock *block
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block {
  PyObject_HEAD
  TextBlock *block;
  TextLine *curr_line;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":380
 *             return BBox(x1, y1, x2, y2)
 * 
 * cdef class BBox:             # <<<<<<<<<<<<<<
 *     cdef double x1, y1, x2, y2
 * 
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox {
  PyObject_HEAD
  double x1;
  double y1;
  double x2;
  double y2;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":427
 *             self.y2 = val
 * 
 * cdef class Line:             # <<<<<<<<<<<<<<
 *     cdef:
 *         TextLine *line
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line {
  PyObject_HEAD
  TextLine *line;
  double x1;
  double y1;
  double x2;
  double y2;
  PyObject *_text;
  PyObject *_bboxes;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":448
 *         # assert len(self._text) == len(self._bboxes)
 * 
 *     def _get_text(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextWord *w
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text {
  PyObject_HEAD
  PyObject *__pyx_v_bad_characters;
  PyObject *__pyx_v_word_aux;
};


/* "project/modules/utils/parsers/pdf/poppler.pyx":474
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']
 *             word_aux = s.getCString().decode('UTF-8')
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))             # <<<<<<<<<<<<<<
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 *             words.append(word)  # decoded to python unicode string
 */
struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *__pyx_outer_scope;
  PyObject *__pyx_v_c;
};



/* "project/modules/utils/parsers/pdf/poppler.pyx":170
 * cdef double RESOLUTION = 72.0
 * 
 * cdef class Document:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PDFDoc *_doc
 */

struct __pyx_vtabstruct_7project_7modules_5utils_7parsers_3pdf_7poppler_Document {
  void (*render_page)(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *, int, OutputDev *);
};
static struct __pyx_vtabstruct_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_vtabptr_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__SplashImageFileFormat(enum SplashImageFileFormat value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum SplashImageFileFormat __Pyx_PyInt_As_enum__SplashImageFileFormat(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_render_page(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, int __pyx_v_page_no, OutputDev *__pyx_v_dev); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'project.modules.utils.parsers.pdf.poppler' */
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Document = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Block = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Line = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text = 0;
static PyTypeObject *__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr = 0;
static double __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION;
#define __Pyx_MODULE_NAME "project.modules.utils.parsers.pdf.poppler"
int __pyx_module_is_main_project__modules__utils__parsers__pdf__poppler = 0;

/* Implementation of 'project.modules.utils.parsers.pdf.poppler' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_unichr;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_Cc[] = "Cc";
static const char __pyx_k_Cf[] = "Cf";
static const char __pyx_k_Cn[] = "Cn";
static const char __pyx_k_So[] = "So";
static const char __pyx_k__2[] = "\n";
static const char __pyx_k__3[] = " ";
static const char __pyx_k_pg[] = "pg";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_NFD[] = "NFD";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_doc[] = "doc";
static const char __pyx_k_png[] = "png";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_flow[] = "flow";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_jpeg[] = "jpeg";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_page[] = "page";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Title[] = "Title";
static const char __pyx_k_block[] = "block";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_pages[] = "pages";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_Author[] = "Author";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_unichr[] = "unichr";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_page_no[] = "page_no";
static const char __pyx_k_category[] = "category";
static const char __pyx_k_get_page[] = "get_page";
static const char __pyx_k_get_text[] = "_get_text";
static const char __pyx_k_max_pages[] = "max_pages";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_num_pages[] = "num_pages";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_resolution[] = "__resolution";
static const char __pyx_k_scale_to_x[] = "scale_to_x";
static const char __pyx_k_scale_to_y[] = "scale_to_y";
static const char __pyx_k_x_scale_to[] = "x_scale_to";
static const char __pyx_k_y_scale_to[] = "y_scale_to";
static const char __pyx_k_fixed_pitch[] = "fixed_pitch";
static const char __pyx_k_phys_layout[] = "phys_layout";
static const char __pyx_k_unicodedata[] = "unicodedata";
static const char __pyx_k_image_format[] = "image_format";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_get_image_format[] = "get_image_format";
static const char __pyx_k_get_text_locals_genexpr[] = "_get_text.<locals>.genexpr";
static const char __pyx_k_project_modules_utils_parsers_pd[] = "project.modules.utils.parsers.pdf.poppler";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_s_Author;
static PyObject *__pyx_n_s_Cc;
static PyObject *__pyx_n_s_Cf;
static PyObject *__pyx_n_s_Cn;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_NFD;
static PyObject *__pyx_n_s_So;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_Title;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_block;
static PyObject *__pyx_n_s_category;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_fixed_pitch;
static PyObject *__pyx_n_s_flow;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_image_format;
static PyObject *__pyx_n_s_get_page;
static PyObject *__pyx_n_s_get_text;
static PyObject *__pyx_n_s_get_text_locals_genexpr;
static PyObject *__pyx_n_s_image_format;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_jpeg;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max_pages;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_num_pages;
static PyObject *__pyx_n_s_page;
static PyObject *__pyx_n_s_page_no;
static PyObject *__pyx_n_s_pages;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pg;
static PyObject *__pyx_n_s_phys_layout;
static PyObject *__pyx_n_s_png;
static PyObject *__pyx_n_s_project_modules_utils_parsers_pd;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_resolution;
static PyObject *__pyx_n_s_scale_to_x;
static PyObject *__pyx_n_s_scale_to_y;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_unichr;
static PyObject *__pyx_n_s_unicodedata;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_x_scale_to;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_y_scale_to;
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, char *__pyx_v_fname, int __pyx_v_max_pages, PyBoolObject *__pyx_v_phys_layout, double __pyx_v_fixed_pitch); /* proto */
static void __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_2__dealloc__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_4get_metadata(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_6get_text(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_pages); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_8__resolution(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_scale_to_x, PyObject *__pyx_v_scale_to_y, PyObject *__pyx_v_page); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_10get_image_format(CYTHON_UNUSED struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_img_format); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_12generate_thumbnail(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_x_scale_to, PyObject *__pyx_v_y_scale_to, PyObject *__pyx_v_image_format, PyObject *__pyx_v_page); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_14__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_16get_page(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, int __pyx_v_pg); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_18__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self, int __pyx_v_page_no, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_doc); /* proto */
static void __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_2__dealloc__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_4__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_6__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_pg); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_2__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_4__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_flow); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_2__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_x2, double __pyx_v_y2); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2as_tuple(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_4__getitem__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block); /* proto */
static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_2__init__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4_get_text(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Document(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Block(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Line(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;

/* "project/modules/utils/parsers/pdf/poppler.pyx":178
 *         double fixed_pitch
 * 
 *     cdef void render_page(self, int page_no, OutputDev *dev):             # <<<<<<<<<<<<<<
 *         self._doc.displayPage(dev, page_no, RESOLUTION, RESOLUTION, 0, True, False, False)
 * 
 */

static void __pyx_f_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_render_page(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, int __pyx_v_page_no, OutputDev *__pyx_v_dev) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render_page", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":179
 * 
 *     cdef void render_page(self, int page_no, OutputDev *dev):
 *         self._doc.displayPage(dev, page_no, RESOLUTION, RESOLUTION, 0, True, False, False)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, char *fname, int max_pages=0, PyBool phys_layout=False, double fixed_pitch=0):
 */
  __pyx_v_self->_doc->displayPage(__pyx_v_dev, __pyx_v_page_no, __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION, __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION, 0, 1, 0, 0, NULL);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":178
 *         double fixed_pitch
 * 
 *     cdef void render_page(self, int page_no, OutputDev *dev):             # <<<<<<<<<<<<<<
 *         self._doc.displayPage(dev, page_no, RESOLUTION, RESOLUTION, 0, True, False, False)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":181
 *         self._doc.displayPage(dev, page_no, RESOLUTION, RESOLUTION, 0, True, False, False)
 * 
 *     def __cinit__(self, char *fname, int max_pages=0, PyBool phys_layout=False, double fixed_pitch=0):             # <<<<<<<<<<<<<<
 *         self._doc = PDFDocFactory().createPDFDoc(GooString(fname))
 *         self._pg = 0
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_fname;
  int __pyx_v_max_pages;
  PyBoolObject *__pyx_v_phys_layout = 0;
  double __pyx_v_fixed_pitch;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_max_pages,&__pyx_n_s_phys_layout,&__pyx_n_s_fixed_pitch,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = (PyObject *)((PyBoolObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_pages);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phys_layout);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fixed_pitch);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 181, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fname = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_fname) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_max_pages = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_pages == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
    } else {
      __pyx_v_max_pages = ((int)0);
    }
    __pyx_v_phys_layout = ((PyBoolObject *)values[2]);
    if (values[3]) {
      __pyx_v_fixed_pitch = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_fixed_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
    } else {
      __pyx_v_fixed_pitch = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 181, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phys_layout), __pyx_ptype_7cpython_4bool_bool, 1, "phys_layout", 0))) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), __pyx_v_fname, __pyx_v_max_pages, __pyx_v_phys_layout, __pyx_v_fixed_pitch);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, char *__pyx_v_fname, int __pyx_v_max_pages, PyBoolObject *__pyx_v_phys_layout, double __pyx_v_fixed_pitch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":182
 * 
 *     def __cinit__(self, char *fname, int max_pages=0, PyBool phys_layout=False, double fixed_pitch=0):
 *         self._doc = PDFDocFactory().createPDFDoc(GooString(fname))             # <<<<<<<<<<<<<<
 *         self._pg = 0
 *         self._max_pages = max_pages
 */
  __pyx_v_self->_doc = PDFDocFactory().createPDFDoc(GooString(__pyx_v_fname), NULL);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":183
 *     def __cinit__(self, char *fname, int max_pages=0, PyBool phys_layout=False, double fixed_pitch=0):
 *         self._doc = PDFDocFactory().createPDFDoc(GooString(fname))
 *         self._pg = 0             # <<<<<<<<<<<<<<
 *         self._max_pages = max_pages
 *         self.phys_layout = phys_layout
 */
  __pyx_v_self->_pg = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":184
 *         self._doc = PDFDocFactory().createPDFDoc(GooString(fname))
 *         self._pg = 0
 *         self._max_pages = max_pages             # <<<<<<<<<<<<<<
 *         self.phys_layout = phys_layout
 *         self.fixed_pitch = fixed_pitch
 */
  __pyx_v_self->_max_pages = __pyx_v_max_pages;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":185
 *         self._pg = 0
 *         self._max_pages = max_pages
 *         self.phys_layout = phys_layout             # <<<<<<<<<<<<<<
 *         self.fixed_pitch = fixed_pitch
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_phys_layout));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_phys_layout));
  __Pyx_GOTREF(__pyx_v_self->phys_layout);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->phys_layout));
  __pyx_v_self->phys_layout = __pyx_v_phys_layout;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":186
 *         self._max_pages = max_pages
 *         self.phys_layout = phys_layout
 *         self.fixed_pitch = fixed_pitch             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->fixed_pitch = __pyx_v_fixed_pitch;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":181
 *         self._doc.displayPage(dev, page_no, RESOLUTION, RESOLUTION, 0, True, False, False)
 * 
 *     def __cinit__(self, char *fname, int max_pages=0, PyBool phys_layout=False, double fixed_pitch=0):             # <<<<<<<<<<<<<<
 *         self._doc = PDFDocFactory().createPDFDoc(GooString(fname))
 *         self._pg = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":188
 *         self.fixed_pitch = fixed_pitch
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._doc != NULL:
 *             del self._doc
 */

/* Python wrapper */
static void __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_2__dealloc__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_2__dealloc__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":189
 * 
 *     def __dealloc__(self):
 *         if self._doc != NULL:             # <<<<<<<<<<<<<<
 *             del self._doc
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_doc != NULL) != 0);
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":190
 *     def __dealloc__(self):
 *         if self._doc != NULL:
 *             del self._doc             # <<<<<<<<<<<<<<
 * 
 *     property num_pages:
 */
    delete __pyx_v_self->_doc;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":189
 * 
 *     def __dealloc__(self):
 *         if self._doc != NULL:             # <<<<<<<<<<<<<<
 *             del self._doc
 * 
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":188
 *         self.fixed_pitch = fixed_pitch
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._doc != NULL:
 *             del self._doc
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":193
 * 
 *     property num_pages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._doc.getNumPages()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":194
 *     property num_pages:
 *         def __get__(self):
 *             return self._doc.getNumPages()             # <<<<<<<<<<<<<<
 * 
 *     property max_pages:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_doc->getNumPages()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":193
 * 
 *     property num_pages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._doc.getNumPages()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.num_pages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":197
 * 
 *     property max_pages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._max_pages and self._max_pages < self.num_pages:
 *                 return self._max_pages
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":198
 *     property max_pages:
 *         def __get__(self):
 *             if self._max_pages and self._max_pages < self.num_pages:             # <<<<<<<<<<<<<<
 *                 return self._max_pages
 *             return self.num_pages
 */
  __pyx_t_2 = (__pyx_v_self->_max_pages != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_max_pages); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":199
 *         def __get__(self):
 *             if self._max_pages and self._max_pages < self.num_pages:
 *                 return self._max_pages             # <<<<<<<<<<<<<<
 *             return self.num_pages
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_max_pages); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":198
 *     property max_pages:
 *         def __get__(self):
 *             if self._max_pages and self._max_pages < self.num_pages:             # <<<<<<<<<<<<<<
 *                 return self._max_pages
 *             return self.num_pages
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":200
 *             if self._max_pages and self._max_pages < self.num_pages:
 *                 return self._max_pages
 *             return self.num_pages             # <<<<<<<<<<<<<<
 * 
 *     def get_metadata(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":197
 * 
 *     property max_pages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._max_pages and self._max_pages < self.num_pages:
 *                 return self._max_pages
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.max_pages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":202
 *             return self.num_pages
 * 
 *     def get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef Object info
 *         cdef Dict *_dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_5get_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_5get_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_metadata (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_4get_metadata(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_4get_metadata(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  Object __pyx_v_info;
  Dict *__pyx_v__dict;
  Unicode *__pyx_v_uu;
  GooString *__pyx_v_text;
  Object __pyx_v_obj;
  PyObject *__pyx_v_meta = NULL;
  int __pyx_v_i;
  char *__pyx_v_key;
  PyObject *__pyx_v_value = NULL;
  int __pyx_v_length;
  int __pyx_v_w;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("get_metadata", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":209
 *         cdef Object obj
 *         cdef char *test
 *         meta = {}             # <<<<<<<<<<<<<<
 *         self._doc.getDocInfo(&info)
 *         if info.isDict():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_meta = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":210
 *         cdef char *test
 *         meta = {}
 *         self._doc.getDocInfo(&info)             # <<<<<<<<<<<<<<
 *         if info.isDict():
 *             _dict = info.getDict()
 */
  __pyx_v_self->_doc->getDocInfo((&__pyx_v_info));

  /* "project/modules/utils/parsers/pdf/poppler.pyx":211
 *         meta = {}
 *         self._doc.getDocInfo(&info)
 *         if info.isDict():             # <<<<<<<<<<<<<<
 *             _dict = info.getDict()
 *             for i in xrange(_dict.getLength()):
 */
  __pyx_t_2 = (__pyx_v_info.isDict() != 0);
  if (__pyx_t_2) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":212
 *         self._doc.getDocInfo(&info)
 *         if info.isDict():
 *             _dict = info.getDict()             # <<<<<<<<<<<<<<
 *             for i in xrange(_dict.getLength()):
 *                 key = _dict.getKey(i)
 */
    __pyx_v__dict = __pyx_v_info.getDict();

    /* "project/modules/utils/parsers/pdf/poppler.pyx":213
 *         if info.isDict():
 *             _dict = info.getDict()
 *             for i in xrange(_dict.getLength()):             # <<<<<<<<<<<<<<
 *                 key = _dict.getKey(i)
 *                 if _dict.lookup(key, &obj,0).isString():
 */
    __pyx_t_3 = __pyx_v__dict->getLength();
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":214
 *             _dict = info.getDict()
 *             for i in xrange(_dict.getLength()):
 *                 key = _dict.getKey(i)             # <<<<<<<<<<<<<<
 *                 if _dict.lookup(key, &obj,0).isString():
 *                     text = obj.getString()
 */
      __pyx_v_key = __pyx_v__dict->getKey(__pyx_v_i);

      /* "project/modules/utils/parsers/pdf/poppler.pyx":215
 *             for i in xrange(_dict.getLength()):
 *                 key = _dict.getKey(i)
 *                 if _dict.lookup(key, &obj,0).isString():             # <<<<<<<<<<<<<<
 *                     text = obj.getString()
 *                     if str(key) in ['Title', 'Author']:
 */
      __pyx_t_2 = (__pyx_v__dict->lookup(__pyx_v_key, (&__pyx_v_obj), 0)->isString() != 0);
      if (__pyx_t_2) {

        /* "project/modules/utils/parsers/pdf/poppler.pyx":216
 *                 key = _dict.getKey(i)
 *                 if _dict.lookup(key, &obj,0).isString():
 *                     text = obj.getString()             # <<<<<<<<<<<<<<
 *                     if str(key) in ['Title', 'Author']:
 *                         # : get unicode correctly
 */
        __pyx_v_text = __pyx_v_obj.getString();

        /* "project/modules/utils/parsers/pdf/poppler.pyx":217
 *                 if _dict.lookup(key, &obj,0).isString():
 *                     text = obj.getString()
 *                     if str(key) in ['Title', 'Author']:             # <<<<<<<<<<<<<<
 *                         # : get unicode correctly
 *                         value, length = [], TextStringToUCS4(text, &uu)
 */
        __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Title, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
        if (!__pyx_t_6) {
        } else {
          __pyx_t_2 = __pyx_t_6;
          goto __pyx_L8_bool_binop_done;
        }
        __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Author, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
        __pyx_t_2 = __pyx_t_6;
        __pyx_L8_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_6 = (__pyx_t_2 != 0);
        if (__pyx_t_6) {

          /* "project/modules/utils/parsers/pdf/poppler.pyx":219
 *                     if str(key) in ['Title', 'Author']:
 *                         # : get unicode correctly
 *                         value, length = [], TextStringToUCS4(text, &uu)             # <<<<<<<<<<<<<<
 *                         for w in xrange(length):
 *                             ch = chr(uu[w]) if uu[w] <= 127 else unichr(uu[w])
 */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = TextStringToUCS4(__pyx_v_text, (&__pyx_v_uu));
          __Pyx_XDECREF_SET(__pyx_v_value, ((PyObject*)__pyx_t_1));
          __pyx_t_1 = 0;
          __pyx_v_length = __pyx_t_7;

          /* "project/modules/utils/parsers/pdf/poppler.pyx":220
 *                         # : get unicode correctly
 *                         value, length = [], TextStringToUCS4(text, &uu)
 *                         for w in xrange(length):             # <<<<<<<<<<<<<<
 *                             ch = chr(uu[w]) if uu[w] <= 127 else unichr(uu[w])
 *                             value.append(ch)
 */
          __pyx_t_7 = __pyx_v_length;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_w = __pyx_t_8;

            /* "project/modules/utils/parsers/pdf/poppler.pyx":221
 *                         value, length = [], TextStringToUCS4(text, &uu)
 *                         for w in xrange(length):
 *                             ch = chr(uu[w]) if uu[w] <= 127 else unichr(uu[w])             # <<<<<<<<<<<<<<
 *                             value.append(ch)
 *                         meta[key] = u''.join(value)
 */
            if ((((__pyx_v_uu[__pyx_v_w]) <= 0x7F) != 0)) {
              __pyx_t_5 = __Pyx_PyInt_From_Unicode((__pyx_v_uu[__pyx_v_w])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
              __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_1 = __pyx_t_5;
              __pyx_t_5 = 0;
            } else {
              __pyx_t_5 = __Pyx_PyInt_From_Unicode((__pyx_v_uu[__pyx_v_w])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
              __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_unichr, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_1 = __pyx_t_5;
              __pyx_t_5 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "project/modules/utils/parsers/pdf/poppler.pyx":222
 *                         for w in xrange(length):
 *                             ch = chr(uu[w]) if uu[w] <= 127 else unichr(uu[w])
 *                             value.append(ch)             # <<<<<<<<<<<<<<
 *                         meta[key] = u''.join(value)
 *                         #
 */
            __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_value, __pyx_v_ch); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 222, __pyx_L1_error)
          }

          /* "project/modules/utils/parsers/pdf/poppler.pyx":223
 *                             ch = chr(uu[w]) if uu[w] <= 127 else unichr(uu[w])
 *                             value.append(ch)
 *                         meta[key] = u''.join(value)             # <<<<<<<<<<<<<<
 *                         #
 *                     else:
 */
          __pyx_t_1 = PyUnicode_Join(__pyx_kp_u_, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(PyDict_SetItem(__pyx_v_meta, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "project/modules/utils/parsers/pdf/poppler.pyx":217
 *                 if _dict.lookup(key, &obj,0).isString():
 *                     text = obj.getString()
 *                     if str(key) in ['Title', 'Author']:             # <<<<<<<<<<<<<<
 *                         # : get unicode correctly
 *                         value, length = [], TextStringToUCS4(text, &uu)
 */
          goto __pyx_L7;
        }

        /* "project/modules/utils/parsers/pdf/poppler.pyx":226
 *                         #
 *                     else:
 *                         meta[key] = text.getCString()             # <<<<<<<<<<<<<<
 *         return meta
 * 
 */
        /*else*/ {
          __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_text->getCString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(PyDict_SetItem(__pyx_v_meta, __pyx_t_5, __pyx_t_1) < 0)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L7:;

        /* "project/modules/utils/parsers/pdf/poppler.pyx":215
 *             for i in xrange(_dict.getLength()):
 *                 key = _dict.getKey(i)
 *                 if _dict.lookup(key, &obj,0).isString():             # <<<<<<<<<<<<<<
 *                     text = obj.getString()
 *                     if str(key) in ['Title', 'Author']:
 */
      }
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":211
 *         meta = {}
 *         self._doc.getDocInfo(&info)
 *         if info.isDict():             # <<<<<<<<<<<<<<
 *             _dict = info.getDict()
 *             for i in xrange(_dict.getLength()):
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":227
 *                     else:
 *                         meta[key] = text.getCString()
 *         return meta             # <<<<<<<<<<<<<<
 * 
 *     def get_text(self, pages=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_meta);
  __pyx_r = __pyx_v_meta;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":202
 *             return self.num_pages
 * 
 *     def get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef Object info
 *         cdef Dict *_dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_meta);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":229
 *         return meta
 * 
 *     def get_text(self, pages=None):             # <<<<<<<<<<<<<<
 *         cdef TextOutputDev *dev
 *         cdef Page *page
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_7get_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_7get_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pages = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pages,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pages);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_text") < 0)) __PYX_ERR(0, 229, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pages = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_text", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 229, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_6get_text(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), __pyx_v_pages);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_6get_text(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_pages) {
  TextOutputDev *__pyx_v_dev;
  PDFRectangle *__pyx_v_rect;
  PyObject *__pyx_v_page_text = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7project_7modules_5utils_7parsers_3pdf_7poppler_GBool __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("get_text", 0);
  __Pyx_INCREF(__pyx_v_pages);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":233
 *         cdef Page *page
 *         cdef PDFRectangle *rect
 *         cdef list page_text = []             # <<<<<<<<<<<<<<
 *         dev = new TextOutputDev(NULL, self.phys_layout, self.fixed_pitch, False, False)
 *         if pages is None:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_page_text = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":234
 *         cdef PDFRectangle *rect
 *         cdef list page_text = []
 *         dev = new TextOutputDev(NULL, self.phys_layout, self.fixed_pitch, False, False)             # <<<<<<<<<<<<<<
 *         if pages is None:
 *             pages = self.max_pages
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->phys_layout)); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_v_dev = new TextOutputDev(NULL, __pyx_t_2, __pyx_v_self->fixed_pitch, 0, 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":235
 *         cdef list page_text = []
 *         dev = new TextOutputDev(NULL, self.phys_layout, self.fixed_pitch, False, False)
 *         if pages is None:             # <<<<<<<<<<<<<<
 *             pages = self.max_pages
 *         for i in xrange(1, pages):
 */
  __pyx_t_3 = (__pyx_v_pages == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":236
 *         dev = new TextOutputDev(NULL, self.phys_layout, self.fixed_pitch, False, False)
 *         if pages is None:
 *             pages = self.max_pages             # <<<<<<<<<<<<<<
 *         for i in xrange(1, pages):
 *             rect = self._doc.getPage(i).getCropBox()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_pages); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_pages, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":235
 *         cdef list page_text = []
 *         dev = new TextOutputDev(NULL, self.phys_layout, self.fixed_pitch, False, False)
 *         if pages is None:             # <<<<<<<<<<<<<<
 *             pages = self.max_pages
 *         for i in xrange(1, pages):
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":237
 *         if pages is None:
 *             pages = self.max_pages
 *         for i in xrange(1, pages):             # <<<<<<<<<<<<<<
 *             rect = self._doc.getPage(i).getCropBox()
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_INCREF(__pyx_v_pages);
  __Pyx_GIVEREF(__pyx_v_pages);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_pages);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 237, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":238
 *             pages = self.max_pages
 *         for i in xrange(1, pages):
 *             rect = self._doc.getPage(i).getCropBox()             # <<<<<<<<<<<<<<
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)
 *             page_text.append('\n' + dev.getText(rect.x1, rect.y1, rect.x2, rect.y2).getCString() + '\n')
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
    __pyx_v_rect = __pyx_v_self->_doc->getPage(__pyx_t_8)->getCropBox();

    /* "project/modules/utils/parsers/pdf/poppler.pyx":239
 *         for i in xrange(1, pages):
 *             rect = self._doc.getPage(i).getCropBox()
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)             # <<<<<<<<<<<<<<
 *             page_text.append('\n' + dev.getText(rect.x1, rect.y1, rect.x2, rect.y2).getCString() + '\n')
 *         del dev
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
    __pyx_v_self->_doc->displayPage(((OutputDev *)__pyx_v_dev), __pyx_t_8, __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION, __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION, 0, 1, 0, 0, NULL);

    /* "project/modules/utils/parsers/pdf/poppler.pyx":240
 *             rect = self._doc.getPage(i).getCropBox()
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)
 *             page_text.append('\n' + dev.getText(rect.x1, rect.y1, rect.x2, rect.y2).getCString() + '\n')             # <<<<<<<<<<<<<<
 *         del dev
 *         return ''.join(page_text)
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_dev->getText(__pyx_v_rect->x1, __pyx_v_rect->y1, __pyx_v_rect->x2, __pyx_v_rect->y2)->getCString()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_kp_s__2, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_9, __pyx_kp_s__2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_page_text, __pyx_t_5); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":237
 *         if pages is None:
 *             pages = self.max_pages
 *         for i in xrange(1, pages):             # <<<<<<<<<<<<<<
 *             rect = self._doc.getPage(i).getCropBox()
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":241
 *             self._doc.displayPage(<OutputDev*> dev, i, RESOLUTION, RESOLUTION, 0, True, False, False)
 *             page_text.append('\n' + dev.getText(rect.x1, rect.y1, rect.x2, rect.y2).getCString() + '\n')
 *         del dev             # <<<<<<<<<<<<<<
 *         return ''.join(page_text)
 * 
 */
  delete __pyx_v_dev;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":242
 *             page_text.append('\n' + dev.getText(rect.x1, rect.y1, rect.x2, rect.y2).getCString() + '\n')
 *         del dev
 *         return ''.join(page_text)             # <<<<<<<<<<<<<<
 * 
 *     def __resolution(self, scale_to_x, scale_to_y, page):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_v_page_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":229
 *         return meta
 * 
 *     def get_text(self, pages=None):             # <<<<<<<<<<<<<<
 *         cdef TextOutputDev *dev
 *         cdef Page *page
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_page_text);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_pages);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":244
 *         return ''.join(page_text)
 * 
 *     def __resolution(self, scale_to_x, scale_to_y, page):             # <<<<<<<<<<<<<<
 *         pg_w = self._doc.getPageMediaWidth(page)
 *         pg_h = self._doc.getPageMediaHeight(page)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9__resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9__resolution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_scale_to_x = 0;
  PyObject *__pyx_v_scale_to_y = 0;
  PyObject *__pyx_v_page = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__resolution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scale_to_x,&__pyx_n_s_scale_to_y,&__pyx_n_s_page,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scale_to_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scale_to_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__resolution", 1, 3, 3, 1); __PYX_ERR(0, 244, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_page)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__resolution", 1, 3, 3, 2); __PYX_ERR(0, 244, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__resolution") < 0)) __PYX_ERR(0, 244, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_scale_to_x = values[0];
    __pyx_v_scale_to_y = values[1];
    __pyx_v_page = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__resolution", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 244, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.__resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_8__resolution(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), __pyx_v_scale_to_x, __pyx_v_scale_to_y, __pyx_v_page);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_8__resolution(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_scale_to_x, PyObject *__pyx_v_scale_to_y, PyObject *__pyx_v_page) {
  PyObject *__pyx_v_pg_w = NULL;
  PyObject *__pyx_v_pg_h = NULL;
  PyObject *__pyx_v_x_resolution = NULL;
  PyObject *__pyx_v_y_resolution = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__resolution", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":245
 * 
 *     def __resolution(self, scale_to_x, scale_to_y, page):
 *         pg_w = self._doc.getPageMediaWidth(page)             # <<<<<<<<<<<<<<
 *         pg_h = self._doc.getPageMediaHeight(page)
 *         x_resolution = (RESOLUTION * scale_to_x) / pg_w
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_doc->getPageMediaWidth(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pg_w = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":246
 *     def __resolution(self, scale_to_x, scale_to_y, page):
 *         pg_w = self._doc.getPageMediaWidth(page)
 *         pg_h = self._doc.getPageMediaHeight(page)             # <<<<<<<<<<<<<<
 *         x_resolution = (RESOLUTION * scale_to_x) / pg_w
 *         y_resolution = (RESOLUTION * scale_to_y) / pg_h
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_doc->getPageMediaHeight(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pg_h = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":247
 *         pg_w = self._doc.getPageMediaWidth(page)
 *         pg_h = self._doc.getPageMediaHeight(page)
 *         x_resolution = (RESOLUTION * scale_to_x) / pg_w             # <<<<<<<<<<<<<<
 *         y_resolution = (RESOLUTION * scale_to_y) / pg_h
 *         pg_w *= (x_resolution / RESOLUTION)
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_scale_to_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_pg_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_resolution = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":248
 *         pg_h = self._doc.getPageMediaHeight(page)
 *         x_resolution = (RESOLUTION * scale_to_x) / pg_w
 *         y_resolution = (RESOLUTION * scale_to_y) / pg_h             # <<<<<<<<<<<<<<
 *         pg_w *= (x_resolution / RESOLUTION)
 *         pg_h *= (y_resolution / RESOLUTION)
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_scale_to_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_pg_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_resolution = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":249
 *         x_resolution = (RESOLUTION * scale_to_x) / pg_w
 *         y_resolution = (RESOLUTION * scale_to_y) / pg_h
 *         pg_w *= (x_resolution / RESOLUTION)             # <<<<<<<<<<<<<<
 *         pg_h *= (y_resolution / RESOLUTION)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_x_resolution, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_v_pg_w, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_pg_w, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":250
 *         y_resolution = (RESOLUTION * scale_to_y) / pg_h
 *         pg_w *= (x_resolution / RESOLUTION)
 *         pg_h *= (y_resolution / RESOLUTION)             # <<<<<<<<<<<<<<
 * 
 *         if self._doc.getPageRotate(page) == 90 or self._doc.getPageRotate(page) == 270:
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_y_resolution, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_v_pg_h, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_pg_h, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":252
 *         pg_h *= (y_resolution / RESOLUTION)
 * 
 *         if self._doc.getPageRotate(page) == 90 or self._doc.getPageRotate(page) == 270:             # <<<<<<<<<<<<<<
 *             pg_w, pg_h = pg_h, pg_w
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_v_self->_doc->getPageRotate(__pyx_t_1) == 90) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_v_self->_doc->getPageRotate(__pyx_t_1) == 0x10E) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":253
 * 
 *         if self._doc.getPageRotate(page) == 90 or self._doc.getPageRotate(page) == 270:
 *             pg_w, pg_h = pg_h, pg_w             # <<<<<<<<<<<<<<
 * 
 *         return pg_w, pg_h, x_resolution, y_resolution
 */
    __pyx_t_6 = __pyx_v_pg_h;
    __pyx_t_7 = __pyx_v_pg_w;
    __pyx_v_pg_w = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_v_pg_h = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":252
 *         pg_h *= (y_resolution / RESOLUTION)
 * 
 *         if self._doc.getPageRotate(page) == 90 or self._doc.getPageRotate(page) == 270:             # <<<<<<<<<<<<<<
 *             pg_w, pg_h = pg_h, pg_w
 * 
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":255
 *             pg_w, pg_h = pg_h, pg_w
 * 
 *         return pg_w, pg_h, x_resolution, y_resolution             # <<<<<<<<<<<<<<
 * 
 *     def get_image_format(self, img_format):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_pg_w);
  __Pyx_GIVEREF(__pyx_v_pg_w);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pg_w);
  __Pyx_INCREF(__pyx_v_pg_h);
  __Pyx_GIVEREF(__pyx_v_pg_h);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_pg_h);
  __Pyx_INCREF(__pyx_v_x_resolution);
  __Pyx_GIVEREF(__pyx_v_x_resolution);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x_resolution);
  __Pyx_INCREF(__pyx_v_y_resolution);
  __Pyx_GIVEREF(__pyx_v_y_resolution);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_y_resolution);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":244
 *         return ''.join(page_text)
 * 
 *     def __resolution(self, scale_to_x, scale_to_y, page):             # <<<<<<<<<<<<<<
 *         pg_w = self._doc.getPageMediaWidth(page)
 *         pg_h = self._doc.getPageMediaHeight(page)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.__resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pg_w);
  __Pyx_XDECREF(__pyx_v_pg_h);
  __Pyx_XDECREF(__pyx_v_x_resolution);
  __Pyx_XDECREF(__pyx_v_y_resolution);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":257
 *         return pg_w, pg_h, x_resolution, y_resolution
 * 
 *     def get_image_format(self, img_format):             # <<<<<<<<<<<<<<
 *         if img_format == 'png':
 *             return splashFormatPng
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_11get_image_format(PyObject *__pyx_v_self, PyObject *__pyx_v_img_format); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_11get_image_format(PyObject *__pyx_v_self, PyObject *__pyx_v_img_format) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_image_format (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_10get_image_format(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), ((PyObject *)__pyx_v_img_format));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_10get_image_format(CYTHON_UNUSED struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_img_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_image_format", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":258
 * 
 *     def get_image_format(self, img_format):
 *         if img_format == 'png':             # <<<<<<<<<<<<<<
 *             return splashFormatPng
 *         if img_format == 'jpeg':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_img_format, __pyx_n_s_png, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":259
 *     def get_image_format(self, img_format):
 *         if img_format == 'png':
 *             return splashFormatPng             # <<<<<<<<<<<<<<
 *         if img_format == 'jpeg':
 *             return splashFormatJpeg
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_enum__SplashImageFileFormat(splashFormatPng); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":258
 * 
 *     def get_image_format(self, img_format):
 *         if img_format == 'png':             # <<<<<<<<<<<<<<
 *             return splashFormatPng
 *         if img_format == 'jpeg':
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":260
 *         if img_format == 'png':
 *             return splashFormatPng
 *         if img_format == 'jpeg':             # <<<<<<<<<<<<<<
 *             return splashFormatJpeg
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_img_format, __pyx_n_s_jpeg, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 260, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":261
 *             return splashFormatPng
 *         if img_format == 'jpeg':
 *             return splashFormatJpeg             # <<<<<<<<<<<<<<
 * 
 *     def generate_thumbnail(self, path, x_scale_to, y_scale_to, image_format, page=1):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_enum__SplashImageFileFormat(splashFormatJpeg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":260
 *         if img_format == 'png':
 *             return splashFormatPng
 *         if img_format == 'jpeg':             # <<<<<<<<<<<<<<
 *             return splashFormatJpeg
 * 
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":257
 *         return pg_w, pg_h, x_resolution, y_resolution
 * 
 *     def get_image_format(self, img_format):             # <<<<<<<<<<<<<<
 *         if img_format == 'png':
 *             return splashFormatPng
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_image_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":263
 *             return splashFormatJpeg
 * 
 *     def generate_thumbnail(self, path, x_scale_to, y_scale_to, image_format, page=1):             # <<<<<<<<<<<<<<
 *         cdef SplashOutputDev *splash;
 *         cdef SplashBitmap *bitmap;
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_13generate_thumbnail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_13generate_thumbnail(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_x_scale_to = 0;
  PyObject *__pyx_v_y_scale_to = 0;
  PyObject *__pyx_v_image_format = 0;
  PyObject *__pyx_v_page = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_thumbnail (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_x_scale_to,&__pyx_n_s_y_scale_to,&__pyx_n_s_image_format,&__pyx_n_s_page,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_scale_to)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_thumbnail", 0, 4, 5, 1); __PYX_ERR(0, 263, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y_scale_to)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_thumbnail", 0, 4, 5, 2); __PYX_ERR(0, 263, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_image_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_thumbnail", 0, 4, 5, 3); __PYX_ERR(0, 263, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_page);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_thumbnail") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = values[0];
    __pyx_v_x_scale_to = values[1];
    __pyx_v_y_scale_to = values[2];
    __pyx_v_image_format = values[3];
    __pyx_v_page = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_thumbnail", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.generate_thumbnail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_12generate_thumbnail(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), __pyx_v_path, __pyx_v_x_scale_to, __pyx_v_y_scale_to, __pyx_v_image_format, __pyx_v_page);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_12generate_thumbnail(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_x_scale_to, PyObject *__pyx_v_y_scale_to, PyObject *__pyx_v_image_format, PyObject *__pyx_v_page) {
  SplashOutputDev *__pyx_v_splash;
  SplashBitmap *__pyx_v_bitmap;
  char *__pyx_v_image;
  Guchar __pyx_v_paper_color[3];
  PyObject *__pyx_v_pg_w = NULL;
  PyObject *__pyx_v_pg_h = NULL;
  PyObject *__pyx_v_x_res = NULL;
  PyObject *__pyx_v_y_res = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Guchar __pyx_t_2[3];
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  enum SplashImageFileFormat __pyx_t_18;
  __Pyx_RefNannySetupContext("generate_thumbnail", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":266
 *         cdef SplashOutputDev *splash;
 *         cdef SplashBitmap *bitmap;
 *         cdef char *image = path;             # <<<<<<<<<<<<<<
 *         cdef Guchar paper_color[3];
 *         paper_color = [255, 255, 255]
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_path); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_v_image = __pyx_t_1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":268
 *         cdef char *image = path;
 *         cdef Guchar paper_color[3];
 *         paper_color = [255, 255, 255]             # <<<<<<<<<<<<<<
 *         splash = new SplashOutputDev(splashModeRGB8, 4, False, paper_color, True, splashThinLineDefault,
 *                                      globalParams.getOverprintPreview())
 */
  __pyx_t_2[0] = 0xFF;
  __pyx_t_2[1] = 0xFF;
  __pyx_t_2[2] = 0xFF;
  memcpy(&(__pyx_v_paper_color[0]), __pyx_t_2, sizeof(__pyx_v_paper_color[0]) * (3));

  /* "project/modules/utils/parsers/pdf/poppler.pyx":269
 *         cdef Guchar paper_color[3];
 *         paper_color = [255, 255, 255]
 *         splash = new SplashOutputDev(splashModeRGB8, 4, False, paper_color, True, splashThinLineDefault,             # <<<<<<<<<<<<<<
 *                                      globalParams.getOverprintPreview())
 *         splash.startDoc(self._doc)
 */
  __pyx_v_splash = new SplashOutputDev(splashModeRGB8, 4, 0, __pyx_v_paper_color, 1, splashThinLineDefault, globalParams->getOverprintPreview());

  /* "project/modules/utils/parsers/pdf/poppler.pyx":271
 *         splash = new SplashOutputDev(splashModeRGB8, 4, False, paper_color, True, splashThinLineDefault,
 *                                      globalParams.getOverprintPreview())
 *         splash.startDoc(self._doc)             # <<<<<<<<<<<<<<
 *         pg_w, pg_h, x_res, y_res = self.__resolution(x_scale_to, y_scale_to, page)
 *         x, y, w, h = 0, 0, int(ceil(pg_w)), int(ceil(pg_h))
 */
  __pyx_v_splash->startDoc(__pyx_v_self->_doc);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":272
 *                                      globalParams.getOverprintPreview())
 *         splash.startDoc(self._doc)
 *         pg_w, pg_h, x_res, y_res = self.__resolution(x_scale_to, y_scale_to, page)             # <<<<<<<<<<<<<<
 *         x, y, w, h = 0, 0, int(ceil(pg_w)), int(ceil(pg_h))
 *         w = int(ceil(pg_w - x)) if x + w > pg_w else w
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolution); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_x_scale_to, __pyx_v_y_scale_to, __pyx_v_page};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_x_scale_to, __pyx_v_y_scale_to, __pyx_v_page};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x_scale_to);
    __Pyx_GIVEREF(__pyx_v_x_scale_to);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_x_scale_to);
    __Pyx_INCREF(__pyx_v_y_scale_to);
    __Pyx_GIVEREF(__pyx_v_y_scale_to);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_y_scale_to);
    __Pyx_INCREF(__pyx_v_page);
    __Pyx_GIVEREF(__pyx_v_page);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_page);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 272, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_7,&__pyx_t_5,&__pyx_t_8};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_7,&__pyx_t_5,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) __PYX_ERR(0, 272, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 272, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_pg_w = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_pg_h = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_x_res = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_y_res = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":273
 *         splash.startDoc(self._doc)
 *         pg_w, pg_h, x_res, y_res = self.__resolution(x_scale_to, y_scale_to, page)
 *         x, y, w, h = 0, 0, int(ceil(pg_w)), int(ceil(pg_h))             # <<<<<<<<<<<<<<
 *         w = int(ceil(pg_w - x)) if x + w > pg_w else w
 *         h = int(ceil(pg_h - y)) if y + h > pg_h else h
 */
  __pyx_t_3 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_8 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_pg_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pg_w};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pg_w};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_pg_w);
      __Pyx_GIVEREF(__pyx_v_pg_w);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_pg_w);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_ceil); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_pg_h); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pg_h};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pg_h};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_pg_h);
      __Pyx_GIVEREF(__pyx_v_pg_h);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_pg_h);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_x = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_y = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_w = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_h = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":274
 *         pg_w, pg_h, x_res, y_res = self.__resolution(x_scale_to, y_scale_to, page)
 *         x, y, w, h = 0, 0, int(ceil(pg_w)), int(ceil(pg_h))
 *         w = int(ceil(pg_w - x)) if x + w > pg_w else w             # <<<<<<<<<<<<<<
 *         h = int(ceil(pg_h - y)) if y + h > pg_h else h
 *         self._doc.displayPageSlice(<OutputDev*> splash, 1, x_res, y_res, -0, True, False, False, x, y, w, h)
 */
  __pyx_t_7 = PyNumber_Add(__pyx_v_x, __pyx_v_w); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_pg_w, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_12) {
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_pg_w, __pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_w);
    __pyx_t_9 = __pyx_v_w;
  }
  __Pyx_DECREF_SET(__pyx_v_w, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":275
 *         x, y, w, h = 0, 0, int(ceil(pg_w)), int(ceil(pg_h))
 *         w = int(ceil(pg_w - x)) if x + w > pg_w else w
 *         h = int(ceil(pg_h - y)) if y + h > pg_h else h             # <<<<<<<<<<<<<<
 *         self._doc.displayPageSlice(<OutputDev*> splash, 1, x_res, y_res, -0, True, False, False, x, y, w, h)
 *         bitmap = splash.getBitmap()
 */
  __pyx_t_7 = PyNumber_Add(__pyx_v_y, __pyx_v_h); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_pg_h, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_12) {
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = PyNumber_Subtract(__pyx_v_pg_h, __pyx_v_y); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_11};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_11};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_h);
    __pyx_t_9 = __pyx_v_h;
  }
  __Pyx_DECREF_SET(__pyx_v_h, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":276
 *         w = int(ceil(pg_w - x)) if x + w > pg_w else w
 *         h = int(ceil(pg_h - y)) if y + h > pg_h else h
 *         self._doc.displayPageSlice(<OutputDev*> splash, 1, x_res, y_res, -0, True, False, False, x, y, w, h)             # <<<<<<<<<<<<<<
 *         bitmap = splash.getBitmap()
 *         bitmap.writeImgFile(self.get_image_format(image_format), image, x_res, y_res)
 */
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_x_res); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_y_res); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_w); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_h); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_v_self->_doc->displayPageSlice(((OutputDev *)__pyx_v_splash), 1, __pyx_t_13, __pyx_t_14, 0, 1, 0, 0, __pyx_t_6, __pyx_t_15, __pyx_t_16, __pyx_t_17, NULL);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":277
 *         h = int(ceil(pg_h - y)) if y + h > pg_h else h
 *         self._doc.displayPageSlice(<OutputDev*> splash, 1, x_res, y_res, -0, True, False, False, x, y, w, h)
 *         bitmap = splash.getBitmap()             # <<<<<<<<<<<<<<
 *         bitmap.writeImgFile(self.get_image_format(image_format), image, x_res, y_res)
 *         del splash
 */
  __pyx_v_bitmap = __pyx_v_splash->getBitmap();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":278
 *         self._doc.displayPageSlice(<OutputDev*> splash, 1, x_res, y_res, -0, True, False, False, x, y, w, h)
 *         bitmap = splash.getBitmap()
 *         bitmap.writeImgFile(self.get_image_format(image_format), image, x_res, y_res)             # <<<<<<<<<<<<<<
 *         del splash
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_image_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_image_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_image_format};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_image_format};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_image_format);
      __Pyx_GIVEREF(__pyx_v_image_format);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_image_format);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_18 = ((enum SplashImageFileFormat)__Pyx_PyInt_As_enum__SplashImageFileFormat(__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_x_res); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_y_res); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_v_bitmap->writeImgFile(__pyx_t_18, __pyx_v_image, __pyx_t_17, __pyx_t_16, NULL);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":279
 *         bitmap = splash.getBitmap()
 *         bitmap.writeImgFile(self.get_image_format(image_format), image, x_res, y_res)
 *         del splash             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  delete __pyx_v_splash;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":263
 *             return splashFormatJpeg
 * 
 *     def generate_thumbnail(self, path, x_scale_to, y_scale_to, image_format, page=1):             # <<<<<<<<<<<<<<
 *         cdef SplashOutputDev *splash;
 *         cdef SplashBitmap *bitmap;
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.generate_thumbnail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pg_w);
  __Pyx_XDECREF(__pyx_v_pg_h);
  __Pyx_XDECREF(__pyx_v_x_res);
  __Pyx_XDECREF(__pyx_v_y_res);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":281
 *         del splash
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_15__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_15__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_14__iter__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_14__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":282
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def get_page(self, int pg):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":281
 *         del splash
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":284
 *         return self
 * 
 *     def get_page(self, int pg):             # <<<<<<<<<<<<<<
 *         return PDFPage(pg, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_17get_page(PyObject *__pyx_v_self, PyObject *__pyx_arg_pg); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_17get_page(PyObject *__pyx_v_self, PyObject *__pyx_arg_pg) {
  int __pyx_v_pg;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_page (wrapper)", 0);
  assert(__pyx_arg_pg); {
    __pyx_v_pg = __Pyx_PyInt_As_int(__pyx_arg_pg); if (unlikely((__pyx_v_pg == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_16get_page(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self), ((int)__pyx_v_pg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_16get_page(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self, int __pyx_v_pg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_page", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":285
 * 
 *     def get_page(self, int pg):
 *         return PDFPage(pg, self)             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_pg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":284
 *         return self
 * 
 *     def get_page(self, int pg):             # <<<<<<<<<<<<<<
 *         return PDFPage(pg, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":287
 *         return PDFPage(pg, self)
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._pg >= self.max_pages:
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_19__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_19__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_18__next__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_18__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":288
 * 
 *     def __next__(self):
 *         if self._pg >= self.max_pages:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         self._pg += 1
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_pg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_pages); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":289
 *     def __next__(self):
 *         if self._pg >= self.max_pages:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         self._pg += 1
 *         return self.get_page(self._pg)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 289, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":288
 * 
 *     def __next__(self):
 *         if self._pg >= self.max_pages:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         self._pg += 1
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":290
 *         if self._pg >= self.max_pages:
 *             raise StopIteration()
 *         self._pg += 1             # <<<<<<<<<<<<<<
 *         return self.get_page(self._pg)
 * 
 */
  __pyx_v_self->_pg = (__pyx_v_self->_pg + 1);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":291
 *             raise StopIteration()
 *         self._pg += 1
 *         return self.get_page(self._pg)             # <<<<<<<<<<<<<<
 * 
 * cdef class PDFPage:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_page); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_pg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":287
 *         return PDFPage(pg, self)
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._pg >= self.max_pages:
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Document.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":300
 *         TextFlow *curr_flow
 * 
 *     def __cinit__(self, int page_no, Document doc):             # <<<<<<<<<<<<<<
 *         cdef TextOutputDev *dev
 *         self.page_no = page_no
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_page_no;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_doc = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_page_no,&__pyx_n_s_doc,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_page_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 300, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_page_no = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_page_no == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L3_error)
    __pyx_v_doc = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.PDFPage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, 1, "doc", 0))) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)__pyx_v_self), __pyx_v_page_no, __pyx_v_doc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self, int __pyx_v_page_no, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *__pyx_v_doc) {
  TextOutputDev *__pyx_v_dev;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_7project_7modules_5utils_7parsers_3pdf_7poppler_GBool __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":302
 *     def __cinit__(self, int page_no, Document doc):
 *         cdef TextOutputDev *dev
 *         self.page_no = page_no             # <<<<<<<<<<<<<<
 *         dev = new TextOutputDev(NULL, doc.phys_layout, doc.fixed_pitch, False, False)
 *         doc.render_page(page_no, <OutputDev*> dev)
 */
  __pyx_v_self->page_no = __pyx_v_page_no;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":303
 *         cdef TextOutputDev *dev
 *         self.page_no = page_no
 *         dev = new TextOutputDev(NULL, doc.phys_layout, doc.fixed_pitch, False, False)             # <<<<<<<<<<<<<<
 *         doc.render_page(page_no, <OutputDev*> dev)
 *         self.page = dev.takeText()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_doc->phys_layout)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_v_dev = new TextOutputDev(NULL, __pyx_t_1, __pyx_v_doc->fixed_pitch, 0, 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":304
 *         self.page_no = page_no
 *         dev = new TextOutputDev(NULL, doc.phys_layout, doc.fixed_pitch, False, False)
 *         doc.render_page(page_no, <OutputDev*> dev)             # <<<<<<<<<<<<<<
 *         self.page = dev.takeText()
 *         del dev
 */
  ((struct __pyx_vtabstruct_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)__pyx_v_doc->__pyx_vtab)->render_page(__pyx_v_doc, __pyx_v_page_no, ((OutputDev *)__pyx_v_dev));

  /* "project/modules/utils/parsers/pdf/poppler.pyx":305
 *         dev = new TextOutputDev(NULL, doc.phys_layout, doc.fixed_pitch, False, False)
 *         doc.render_page(page_no, <OutputDev*> dev)
 *         self.page = dev.takeText()             # <<<<<<<<<<<<<<
 *         del dev
 *         self.curr_flow = self.page.getFlows()
 */
  __pyx_v_self->page = __pyx_v_dev->takeText();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":306
 *         doc.render_page(page_no, <OutputDev*> dev)
 *         self.page = dev.takeText()
 *         del dev             # <<<<<<<<<<<<<<
 *         self.curr_flow = self.page.getFlows()
 *         self.doc = doc
 */
  delete __pyx_v_dev;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":307
 *         self.page = dev.takeText()
 *         del dev
 *         self.curr_flow = self.page.getFlows()             # <<<<<<<<<<<<<<
 *         self.doc = doc
 * 
 */
  __pyx_v_self->curr_flow = __pyx_v_self->page->getFlows();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":308
 *         del dev
 *         self.curr_flow = self.page.getFlows()
 *         self.doc = doc             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":300
 *         TextFlow *curr_flow
 * 
 *     def __cinit__(self, int page_no, Document doc):             # <<<<<<<<<<<<<<
 *         cdef TextOutputDev *dev
 *         self.page_no = page_no
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.PDFPage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":310
 *         self.doc = doc
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.page != NULL:
 *             self.page.decRefCnt()
 */

/* Python wrapper */
static void __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_2__dealloc__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_2__dealloc__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":311
 * 
 *     def __dealloc__(self):
 *         if self.page != NULL:             # <<<<<<<<<<<<<<
 *             self.page.decRefCnt()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->page != NULL) != 0);
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":312
 *     def __dealloc__(self):
 *         if self.page != NULL:
 *             self.page.decRefCnt()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    __pyx_v_self->page->decRefCnt();

    /* "project/modules/utils/parsers/pdf/poppler.pyx":311
 * 
 *     def __dealloc__(self):
 *         if self.page != NULL:             # <<<<<<<<<<<<<<
 *             self.page.decRefCnt()
 * 
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":310
 *         self.doc = doc
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.page != NULL:
 *             self.page.decRefCnt()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":314
 *             self.page.decRefCnt()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_4__iter__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_4__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":315
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":314
 *             self.page.decRefCnt()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":317
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Flow flow
 *         if not self.curr_flow:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_6__next__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_6__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_flow = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":319
 *     def __next__(self):
 *         cdef Flow flow
 *         if not self.curr_flow:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         flow = Flow(self)
 */
  __pyx_t_1 = ((!(__pyx_v_self->curr_flow != 0)) != 0);
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":320
 *         cdef Flow flow
 *         if not self.curr_flow:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         flow = Flow(self)
 *         self.curr_flow = self.curr_flow.getNext()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 320, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":319
 *     def __next__(self):
 *         cdef Flow flow
 *         if not self.curr_flow:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         flow = Flow(self)
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":321
 *         if not self.curr_flow:
 *             raise StopIteration()
 *         flow = Flow(self)             # <<<<<<<<<<<<<<
 *         self.curr_flow = self.curr_flow.getNext()
 *         return flow
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_flow = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":322
 *             raise StopIteration()
 *         flow = Flow(self)
 *         self.curr_flow = self.curr_flow.getNext()             # <<<<<<<<<<<<<<
 *         return flow
 * 
 */
  __pyx_v_self->curr_flow = __pyx_v_self->curr_flow->getNext();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":323
 *         flow = Flow(self)
 *         self.curr_flow = self.curr_flow.getNext()
 *         return flow             # <<<<<<<<<<<<<<
 * 
 *     property page_no:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_flow));
  __pyx_r = ((PyObject *)__pyx_v_flow);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":317
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Flow flow
 *         if not self.curr_flow:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.PDFPage.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_flow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":326
 * 
 *     property page_no:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.page_no
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":327
 *     property page_no:
 *         def __get__(self):
 *             return self.page_no             # <<<<<<<<<<<<<<
 * 
 * cdef class Flow:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->page_no); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":326
 * 
 *     property page_no:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.page_no
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.PDFPage.page_no.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":334
 *         TextBlock *curr_block
 * 
 *     def __cinit__(self, PDFPage pg):             # <<<<<<<<<<<<<<
 *         self.flow = pg.curr_flow
 *         self.curr_block = self.flow.getBlocks()
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_pg = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 334, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_pg = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 334, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Flow.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pg), __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, 1, "pg", 0))) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *)__pyx_v_self), __pyx_v_pg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *__pyx_v_pg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  TextFlow *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":335
 * 
 *     def __cinit__(self, PDFPage pg):
 *         self.flow = pg.curr_flow             # <<<<<<<<<<<<<<
 *         self.curr_block = self.flow.getBlocks()
 * 
 */
  __pyx_t_1 = __pyx_v_pg->curr_flow;
  __pyx_v_self->flow = __pyx_t_1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":336
 *     def __cinit__(self, PDFPage pg):
 *         self.flow = pg.curr_flow
 *         self.curr_block = self.flow.getBlocks()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->curr_block = __pyx_v_self->flow->getBlocks();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":334
 *         TextBlock *curr_block
 * 
 *     def __cinit__(self, PDFPage pg):             # <<<<<<<<<<<<<<
 *         self.flow = pg.curr_flow
 *         self.curr_block = self.flow.getBlocks()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":338
 *         self.curr_block = self.flow.getBlocks()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_2__iter__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_2__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":339
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":338
 *         self.curr_block = self.flow.getBlocks()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":341
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Block b
 *         if not self.curr_block:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_4__next__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_4__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_self) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_b = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":343
 *     def __next__(self):
 *         cdef Block b
 *         if not self.curr_block:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         b = Block(self)
 */
  __pyx_t_1 = ((!(__pyx_v_self->curr_block != 0)) != 0);
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":344
 *         cdef Block b
 *         if not self.curr_block:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         b = Block(self)
 *         self.curr_block = self.curr_block.getNext()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 344, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":343
 *     def __next__(self):
 *         cdef Block b
 *         if not self.curr_block:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         b = Block(self)
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":345
 *         if not self.curr_block:
 *             raise StopIteration()
 *         b = Block(self)             # <<<<<<<<<<<<<<
 *         self.curr_block = self.curr_block.getNext()
 *         return b
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Block), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_b = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":346
 *             raise StopIteration()
 *         b = Block(self)
 *         self.curr_block = self.curr_block.getNext()             # <<<<<<<<<<<<<<
 *         return b
 * 
 */
  __pyx_v_self->curr_block = __pyx_v_self->curr_block->getNext();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":347
 *         b = Block(self)
 *         self.curr_block = self.curr_block.getNext()
 *         return b             # <<<<<<<<<<<<<<
 * 
 * cdef class Block:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_b));
  __pyx_r = ((PyObject *)__pyx_v_b);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":341
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Block b
 *         if not self.curr_block:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Flow.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":354
 *         TextLine *curr_line
 * 
 *     def __cinit__(self, Flow flow):             # <<<<<<<<<<<<<<
 *         self.block = flow.curr_block
 *         self.curr_line = self.block.getLines()
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_flow = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flow)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 354, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_flow = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 354, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Block.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_flow), __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow, 1, "flow", 0))) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)__pyx_v_self), __pyx_v_flow);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow *__pyx_v_flow) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  TextBlock *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":355
 * 
 *     def __cinit__(self, Flow flow):
 *         self.block = flow.curr_block             # <<<<<<<<<<<<<<
 *         self.curr_line = self.block.getLines()
 * 
 */
  __pyx_t_1 = __pyx_v_flow->curr_block;
  __pyx_v_self->block = __pyx_t_1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":356
 *     def __cinit__(self, Flow flow):
 *         self.block = flow.curr_block
 *         self.curr_line = self.block.getLines()             # <<<<<<<<<<<<<<
 * 
 *     #TODO - do we need to delete blocks, lines ... or are they destroyed with page?
 */
  __pyx_v_self->curr_line = __pyx_v_self->block->getLines();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":354
 *         TextLine *curr_line
 * 
 *     def __cinit__(self, Flow flow):             # <<<<<<<<<<<<<<
 *         self.block = flow.curr_block
 *         self.curr_line = self.block.getLines()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":363
 *     #             del self.block
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_2__iter__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_2__iter__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":364
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":363
 *     #             del self.block
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":366
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Line l
 *         if not self.curr_line:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4__next__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4__next__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_l = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":368
 *     def __next__(self):
 *         cdef Line l
 *         if not self.curr_line:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         l = Line(self)
 */
  __pyx_t_1 = ((!(__pyx_v_self->curr_line != 0)) != 0);
  if (__pyx_t_1) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":369
 *         cdef Line l
 *         if not self.curr_line:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         l = Line(self)
 *         self.curr_line = self.curr_line.getNext()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 369, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":368
 *     def __next__(self):
 *         cdef Line l
 *         if not self.curr_line:             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         l = Line(self)
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":370
 *         if not self.curr_line:
 *             raise StopIteration()
 *         l = Line(self)             # <<<<<<<<<<<<<<
 *         self.curr_line = self.curr_line.getNext()
 *         return l
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Line), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_l = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":371
 *             raise StopIteration()
 *         l = Line(self)
 *         self.curr_line = self.curr_line.getNext()             # <<<<<<<<<<<<<<
 *         return l
 * 
 */
  __pyx_v_self->curr_line = __pyx_v_self->curr_line->getNext();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":372
 *         l = Line(self)
 *         self.curr_line = self.curr_line.getNext()
 *         return l             # <<<<<<<<<<<<<<
 * 
 *     property bbox:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_l));
  __pyx_r = ((PyObject *)__pyx_v_l);
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":366
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Line l
 *         if not self.curr_line:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Block.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":375
 * 
 *     property bbox:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double x1, y1, x2, y2
 *             self.block.getBBox(&x1, &y1, &x2, &y2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_self) {
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":377
 *         def __get__(self):
 *             cdef double x1, y1, x2, y2
 *             self.block.getBBox(&x1, &y1, &x2, &y2)             # <<<<<<<<<<<<<<
 *             return BBox(x1, y1, x2, y2)
 * 
 */
  __pyx_v_self->block->getBBox((&__pyx_v_x1), (&__pyx_v_y1), (&__pyx_v_x2), (&__pyx_v_y2));

  /* "project/modules/utils/parsers/pdf/poppler.pyx":378
 *             cdef double x1, y1, x2, y2
 *             self.block.getBBox(&x1, &y1, &x2, &y2)
 *             return BBox(x1, y1, x2, y2)             # <<<<<<<<<<<<<<
 * 
 * cdef class BBox:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":375
 * 
 *     property bbox:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double x1, y1, x2, y2
 *             self.block.getBBox(&x1, &y1, &x2, &y2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Block.bbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":383
 *     cdef double x1, y1, x2, y2
 * 
 *     def __cinit__(self, double x1, double y1, double x2, double y2):             # <<<<<<<<<<<<<<
 *         self.x1 = x1
 *         self.x2 = x2
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_x2,&__pyx_n_s_y2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 383, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 383, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 383, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 383, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_y2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_y2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 383, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), __pyx_v_x1, __pyx_v_y1, __pyx_v_x2, __pyx_v_y2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_x2, double __pyx_v_y2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":384
 * 
 *     def __cinit__(self, double x1, double y1, double x2, double y2):
 *         self.x1 = x1             # <<<<<<<<<<<<<<
 *         self.x2 = x2
 *         self.y1 = y1
 */
  __pyx_v_self->x1 = __pyx_v_x1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":385
 *     def __cinit__(self, double x1, double y1, double x2, double y2):
 *         self.x1 = x1
 *         self.x2 = x2             # <<<<<<<<<<<<<<
 *         self.y1 = y1
 *         self.y2 = y2
 */
  __pyx_v_self->x2 = __pyx_v_x2;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":386
 *         self.x1 = x1
 *         self.x2 = x2
 *         self.y1 = y1             # <<<<<<<<<<<<<<
 *         self.y2 = y2
 * 
 */
  __pyx_v_self->y1 = __pyx_v_y1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":387
 *         self.x2 = x2
 *         self.y1 = y1
 *         self.y2 = y2             # <<<<<<<<<<<<<<
 * 
 *     def as_tuple(self):
 */
  __pyx_v_self->y2 = __pyx_v_y2;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":383
 *     cdef double x1, y1, x2, y2
 * 
 *     def __cinit__(self, double x1, double y1, double x2, double y2):             # <<<<<<<<<<<<<<
 *         self.x1 = x1
 *         self.x2 = x2
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":389
 *         self.y2 = y2
 * 
 *     def as_tuple(self):             # <<<<<<<<<<<<<<
 *         return self.x1, self.y1, self.x2, self.y2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_3as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_3as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_tuple (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2as_tuple(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2as_tuple(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("as_tuple", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":390
 * 
 *     def as_tuple(self):
 *         return self.x1, self.y1, self.x2, self.y2             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":389
 *         self.y2 = y2
 * 
 *     def as_tuple(self):             # <<<<<<<<<<<<<<
 *         return self.x1, self.y1, self.x2, self.y2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.as_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":392
 *         return self.x1, self.y1, self.x2, self.y2
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i == 0:
 *             return self.x1
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_4__getitem__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_4__getitem__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":393
 * 
 *     def __getitem__(self, i):
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             return self.x1
 *         elif i == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_i, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":394
 *     def __getitem__(self, i):
 *         if i == 0:
 *             return self.x1             # <<<<<<<<<<<<<<
 *         elif i == 1:
 *             return self.y1
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":393
 * 
 *     def __getitem__(self, i):
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             return self.x1
 *         elif i == 1:
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":395
 *         if i == 0:
 *             return self.x1
 *         elif i == 1:             # <<<<<<<<<<<<<<
 *             return self.y1
 *         elif i == 2:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":396
 *             return self.x1
 *         elif i == 1:
 *             return self.y1             # <<<<<<<<<<<<<<
 *         elif i == 2:
 *             return self.x2
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":395
 *         if i == 0:
 *             return self.x1
 *         elif i == 1:             # <<<<<<<<<<<<<<
 *             return self.y1
 *         elif i == 2:
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":397
 *         elif i == 1:
 *             return self.y1
 *         elif i == 2:             # <<<<<<<<<<<<<<
 *             return self.x2
 *         elif i == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":398
 *             return self.y1
 *         elif i == 2:
 *             return self.x2             # <<<<<<<<<<<<<<
 *         elif i == 3:
 *             return self.y2
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":397
 *         elif i == 1:
 *             return self.y1
 *         elif i == 2:             # <<<<<<<<<<<<<<
 *             return self.x2
 *         elif i == 3:
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":399
 *         elif i == 2:
 *             return self.x2
 *         elif i == 3:             # <<<<<<<<<<<<<<
 *             return self.y2
 *         raise IndexError()
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_i, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "project/modules/utils/parsers/pdf/poppler.pyx":400
 *             return self.x2
 *         elif i == 3:
 *             return self.y2             # <<<<<<<<<<<<<<
 *         raise IndexError()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":399
 *         elif i == 2:
 *             return self.x2
 *         elif i == 3:             # <<<<<<<<<<<<<<
 *             return self.y2
 *         raise IndexError()
 */
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":401
 *         elif i == 3:
 *             return self.y2
 *         raise IndexError()             # <<<<<<<<<<<<<<
 * 
 *     property x1:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_IndexError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 401, __pyx_L1_error)

  /* "project/modules/utils/parsers/pdf/poppler.pyx":392
 *         return self.x1, self.y1, self.x2, self.y2
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if i == 0:
 *             return self.x1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":404
 * 
 *     property x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1
 *         def __set__(self, double val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":405
 *     property x1:
 *         def __get__(self):
 *             return self.x1             # <<<<<<<<<<<<<<
 *         def __set__(self, double val):
 *             self.x1 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":404
 * 
 *     property x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1
 *         def __set__(self, double val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.x1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":406
 *         def __get__(self):
 *             return self.x1
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.x1 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.x1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_2__set__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":407
 *             return self.x1
 *         def __set__(self, double val):
 *             self.x1 = val             # <<<<<<<<<<<<<<
 * 
 *     property x2:
 */
  __pyx_v_self->x1 = __pyx_v_val;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":406
 *         def __get__(self):
 *             return self.x1
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.x1 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":410
 * 
 *     property x2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x2
 *         def __set__(self, double val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":411
 *     property x2:
 *         def __get__(self):
 *             return self.x2             # <<<<<<<<<<<<<<
 *         def __set__(self, double val):
 *             self.x2 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":410
 * 
 *     property x2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x2
 *         def __set__(self, double val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.x2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":412
 *         def __get__(self):
 *             return self.x2
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.x2 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.x2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_2__set__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":413
 *             return self.x2
 *         def __set__(self, double val):
 *             self.x2 = val             # <<<<<<<<<<<<<<
 * 
 *     property y1:
 */
  __pyx_v_self->x2 = __pyx_v_val;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":412
 *         def __get__(self):
 *             return self.x2
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.x2 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":416
 * 
 *     property y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1
 *         def __set__(self, double val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":417
 *     property y1:
 *         def __get__(self):
 *             return self.y1             # <<<<<<<<<<<<<<
 *         def __set__(self, double val):
 *             self.y1 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":416
 * 
 *     property y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1
 *         def __set__(self, double val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.y1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":418
 *         def __get__(self):
 *             return self.y1
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.y1 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.y1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_2__set__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":419
 *             return self.y1
 *         def __set__(self, double val):
 *             self.y1 = val             # <<<<<<<<<<<<<<
 * 
 *     property y2:
 */
  __pyx_v_self->y1 = __pyx_v_val;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":418
 *         def __get__(self):
 *             return self.y1
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.y1 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":422
 * 
 *     property y2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y2
 *         def __set__(self, double val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":423
 *     property y2:
 *         def __get__(self):
 *             return self.y2             # <<<<<<<<<<<<<<
 *         def __set__(self, double val):
 *             self.y2 = val
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":422
 * 
 *     property y2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y2
 *         def __set__(self, double val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.y2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":424
 *         def __get__(self):
 *             return self.y2
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.y2 = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.BBox.y2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_2__set__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_v_self), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_2__set__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":425
 *             return self.y2
 *         def __set__(self, double val):
 *             self.y2 = val             # <<<<<<<<<<<<<<
 * 
 * cdef class Line:
 */
  __pyx_v_self->y2 = __pyx_v_val;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":424
 *         def __get__(self):
 *             return self.y2
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             self.y2 = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":435
 * 
 * 
 *     def __cinit__(self, Block block):             # <<<<<<<<<<<<<<
 *         self.line = block.curr_line
 * 
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_block,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 435, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_block = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 435, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block), __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, 1, "block", 0))) __PYX_ERR(0, 435, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line___cinit__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self), __pyx_v_block);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line___cinit__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self, struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  TextLine *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":436
 * 
 *     def __cinit__(self, Block block):
 *         self.line = block.curr_line             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, Block block):
 */
  __pyx_t_1 = __pyx_v_block->curr_line;
  __pyx_v_self->line = __pyx_t_1;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":435
 * 
 * 
 *     def __cinit__(self, Block block):             # <<<<<<<<<<<<<<
 *         self.line = block.curr_line
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":438
 *         self.line = block.curr_line
 * 
 *     def __init__(self, Block block):             # <<<<<<<<<<<<<<
 *         self._text = u''  # text bytes
 *         self.x1 = 0
 */

/* Python wrapper */
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_block,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 438, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_block = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 438, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block), __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, 1, "block", 0))) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_2__init__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self), __pyx_v_block);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_2__init__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block *__pyx_v_block) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":439
 * 
 *     def __init__(self, Block block):
 *         self._text = u''  # text bytes             # <<<<<<<<<<<<<<
 *         self.x1 = 0
 *         self.y1 = 0
 */
  __Pyx_INCREF(__pyx_kp_u_);
  __Pyx_GIVEREF(__pyx_kp_u_);
  __Pyx_GOTREF(__pyx_v_self->_text);
  __Pyx_DECREF(__pyx_v_self->_text);
  __pyx_v_self->_text = __pyx_kp_u_;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":440
 *     def __init__(self, Block block):
 *         self._text = u''  # text bytes
 *         self.x1 = 0             # <<<<<<<<<<<<<<
 *         self.y1 = 0
 *         self.x2 = 0
 */
  __pyx_v_self->x1 = 0.0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":441
 *         self._text = u''  # text bytes
 *         self.x1 = 0
 *         self.y1 = 0             # <<<<<<<<<<<<<<
 *         self.x2 = 0
 *         self.y2 = 0
 */
  __pyx_v_self->y1 = 0.0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":442
 *         self.x1 = 0
 *         self.y1 = 0
 *         self.x2 = 0             # <<<<<<<<<<<<<<
 *         self.y2 = 0
 *         self._bboxes = []
 */
  __pyx_v_self->x2 = 0.0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":443
 *         self.y1 = 0
 *         self.x2 = 0
 *         self.y2 = 0             # <<<<<<<<<<<<<<
 *         self._bboxes = []
 *         self._get_text()
 */
  __pyx_v_self->y2 = 0.0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":444
 *         self.x2 = 0
 *         self.y2 = 0
 *         self._bboxes = []             # <<<<<<<<<<<<<<
 *         self._get_text()
 *         # assert len(self._text) == len(self._bboxes)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_bboxes);
  __Pyx_DECREF(__pyx_v_self->_bboxes);
  __pyx_v_self->_bboxes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":445
 *         self.y2 = 0
 *         self._bboxes = []
 *         self._get_text()             # <<<<<<<<<<<<<<
 *         # assert len(self._text) == len(self._bboxes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":438
 *         self.line = block.curr_line
 * 
 *     def __init__(self, Block block):             # <<<<<<<<<<<<<<
 *         self._text = u''  # text bytes
 *         self.x1 = 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":448
 *         # assert len(self._text) == len(self._bboxes)
 * 
 *     def _get_text(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextWord *w
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_5_get_text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_5_get_text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_text (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4_get_text(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "project/modules/utils/parsers/pdf/poppler.pyx":474
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']
 *             word_aux = s.getCString().decode('UTF-8')
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))             # <<<<<<<<<<<<<<
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 *             words.append(word)  # decoded to python unicode string
 */

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 474, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_text_locals_genexpr, __pyx_n_s_project_modules_utils_parsers_pd); if (unlikely(!gen)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line._get_text.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_normalize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux)) { __Pyx_RaiseClosureNameError("word_aux"); __PYX_ERR(0, 474, __pyx_L1_error) }
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_NFD, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_NFD, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_n_s_NFD);
    __Pyx_GIVEREF(__pyx_n_s_NFD);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_n_s_NFD);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_word_aux);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 474, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 474, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_category); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_c};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_c};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_cur_scope->__pyx_v_c);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bad_characters)) { __Pyx_RaiseClosureNameError("bad_characters"); __PYX_ERR(0, 474, __pyx_L1_error) }
    __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_bad_characters, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_cur_scope->__pyx_v_c))) __PYX_ERR(0, 474, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":448
 *         # assert len(self._text) == len(self._bboxes)
 * 
 *     def _get_text(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextWord *w
 */

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4_get_text(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *__pyx_cur_scope;
  TextWord *__pyx_v_w;
  GooString *__pyx_v_s;
  double __pyx_v_bx1;
  double __pyx_v_bx2;
  double __pyx_v_by1;
  double __pyx_v_by2;
  PyObject *__pyx_v_words = 0;
  CYTHON_UNUSED int __pyx_v_offset;
  int __pyx_v_i;
  int __pyx_v_wlen;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *__pyx_v_last_bbox = 0;
  PyObject *__pyx_v_word = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  char *__pyx_t_11;
  __Pyx_RefNannySetupContext("_get_text", 0);
  __pyx_cur_scope = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 448, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":453
 *             GooString *s
 *             double bx1, bx2, by1, by2
 *             list words = []             # <<<<<<<<<<<<<<
 *             int offset = 0, i, wlen
 *             BBox last_bbox
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_words = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":454
 *             double bx1, bx2, by1, by2
 *             list words = []
 *             int offset = 0, i, wlen             # <<<<<<<<<<<<<<
 *             BBox last_bbox
 * 
 */
  __pyx_v_offset = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":457
 *             BBox last_bbox
 * 
 *         w = self.line.getWords()             # <<<<<<<<<<<<<<
 *         while w:
 *             wlen = w.getLength()
 */
  __pyx_v_w = __pyx_v_self->line->getWords();

  /* "project/modules/utils/parsers/pdf/poppler.pyx":458
 * 
 *         w = self.line.getWords()
 *         while w:             # <<<<<<<<<<<<<<
 *             wlen = w.getLength()
 *             assert wlen > 0
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_w != 0);
    if (!__pyx_t_2) break;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":459
 *         w = self.line.getWords()
 *         while w:
 *             wlen = w.getLength()             # <<<<<<<<<<<<<<
 *             assert wlen > 0
 *             # gets bounding boxes for all characters
 */
    __pyx_v_wlen = __pyx_v_w->getLength();

    /* "project/modules/utils/parsers/pdf/poppler.pyx":460
 *         while w:
 *             wlen = w.getLength()
 *             assert wlen > 0             # <<<<<<<<<<<<<<
 *             # gets bounding boxes for all characters
 *             # and font info
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_wlen > 0) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 460, __pyx_L1_error)
      }
    }
    #endif

    /* "project/modules/utils/parsers/pdf/poppler.pyx":463
 *             # gets bounding boxes for all characters
 *             # and font info
 *             for i in range(wlen):             # <<<<<<<<<<<<<<
 *                 w.getCharBBox(i, &bx1, &by1, &bx2, &by2)
 *                 last_bbox = BBox(bx1, by1, bx2, by2)
 */
    __pyx_t_3 = __pyx_v_wlen;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":464
 *             # and font info
 *             for i in range(wlen):
 *                 w.getCharBBox(i, &bx1, &by1, &bx2, &by2)             # <<<<<<<<<<<<<<
 *                 last_bbox = BBox(bx1, by1, bx2, by2)
 *                 # if previous word is space update it's right end
 */
      __pyx_v_w->getCharBBox(__pyx_v_i, (&__pyx_v_bx1), (&__pyx_v_by1), (&__pyx_v_bx2), (&__pyx_v_by2));

      /* "project/modules/utils/parsers/pdf/poppler.pyx":465
 *             for i in range(wlen):
 *                 w.getCharBBox(i, &bx1, &by1, &bx2, &by2)
 *                 last_bbox = BBox(bx1, by1, bx2, by2)             # <<<<<<<<<<<<<<
 *                 # if previous word is space update it's right end
 *                 if i == 0 and words and words[-1] == u' ':
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_bx1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_by1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_bx2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_by2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
      __pyx_t_1 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_last_bbox, ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox *)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":467
 *                 last_bbox = BBox(bx1, by1, bx2, by2)
 *                 # if previous word is space update it's right end
 *                 if i == 0 and words and words[-1] == u' ':             # <<<<<<<<<<<<<<
 *                     self._bboxes[-1].x2 = last_bbox.x1
 *                 self._bboxes.append(last_bbox)
 */
      __pyx_t_9 = ((__pyx_v_i == 0) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_2 = __pyx_t_9;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_9 = (__pyx_v_words != Py_None) && (PyList_GET_SIZE(__pyx_v_words) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_2 = __pyx_t_9;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_words, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_kp_u__3, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = __pyx_t_9;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_2) {

        /* "project/modules/utils/parsers/pdf/poppler.pyx":468
 *                 # if previous word is space update it's right end
 *                 if i == 0 and words and words[-1] == u' ':
 *                     self._bboxes[-1].x2 = last_bbox.x1             # <<<<<<<<<<<<<<
 *                 self._bboxes.append(last_bbox)
 *                 #and then text as UTF-8 bytes
 */
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_last_bbox->x1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_v_self->_bboxes == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 468, __pyx_L1_error)
        }
        __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->_bboxes, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_8, __pyx_n_s_x2, __pyx_t_7) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "project/modules/utils/parsers/pdf/poppler.pyx":467
 *                 last_bbox = BBox(bx1, by1, bx2, by2)
 *                 # if previous word is space update it's right end
 *                 if i == 0 and words and words[-1] == u' ':             # <<<<<<<<<<<<<<
 *                     self._bboxes[-1].x2 = last_bbox.x1
 *                 self._bboxes.append(last_bbox)
 */
      }

      /* "project/modules/utils/parsers/pdf/poppler.pyx":469
 *                 if i == 0 and words and words[-1] == u' ':
 *                     self._bboxes[-1].x2 = last_bbox.x1
 *                 self._bboxes.append(last_bbox)             # <<<<<<<<<<<<<<
 *                 #and then text as UTF-8 bytes
 *             s = w.getText()
 */
      if (unlikely(__pyx_v_self->_bboxes == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        __PYX_ERR(0, 469, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->_bboxes, ((PyObject *)__pyx_v_last_bbox)); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 469, __pyx_L1_error)
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":471
 *                 self._bboxes.append(last_bbox)
 *                 #and then text as UTF-8 bytes
 *             s = w.getText()             # <<<<<<<<<<<<<<
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']
 *             word_aux = s.getCString().decode('UTF-8')
 */
    __pyx_v_s = __pyx_v_w->getText();

    /* "project/modules/utils/parsers/pdf/poppler.pyx":472
 *                 #and then text as UTF-8 bytes
 *             s = w.getText()
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']             # <<<<<<<<<<<<<<
 *             word_aux = s.getCString().decode('UTF-8')
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))
 */
    __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_So);
    __Pyx_GIVEREF(__pyx_n_s_So);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_So);
    __Pyx_INCREF(__pyx_n_s_Cf);
    __Pyx_GIVEREF(__pyx_n_s_Cf);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_Cf);
    __Pyx_INCREF(__pyx_n_s_Cn);
    __Pyx_GIVEREF(__pyx_n_s_Cn);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_Cn);
    __Pyx_INCREF(__pyx_n_s_Cc);
    __Pyx_GIVEREF(__pyx_n_s_Cc);
    PyList_SET_ITEM(__pyx_t_8, 3, __pyx_n_s_Cc);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bad_characters);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bad_characters, ((PyObject*)__pyx_t_8));
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":473
 *             s = w.getText()
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']
 *             word_aux = s.getCString().decode('UTF-8')             # <<<<<<<<<<<<<<
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 */
    __pyx_t_11 = __pyx_v_s->getCString();
    __pyx_t_8 = __Pyx_decode_c_string(__pyx_t_11, 0, strlen(__pyx_t_11), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_word_aux);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_word_aux, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":474
 *             bad_characters = ['So', 'Cf', 'Cn', 'Cc']
 *             word_aux = s.getCString().decode('UTF-8')
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))             # <<<<<<<<<<<<<<
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 *             words.append(word)  # decoded to python unicode string
 */
    __pyx_t_8 = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_9_get_text_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_word, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":476
 *             word = u''.join((c for c in normalize('NFD', word_aux) if category(c) not in bad_characters))
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 *             words.append(word)  # decoded to python unicode string             # <<<<<<<<<<<<<<
 *             del s
 *             # must have same ammount of bboxes and characters in word
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_words, __pyx_v_word); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 476, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":477
 *             #print s.getCString(), w.getLength(), len(s.getCString())
 *             words.append(word)  # decoded to python unicode string
 *             del s             # <<<<<<<<<<<<<<
 *             # must have same ammount of bboxes and characters in word
 *             # assert len(words[-1]) == wlen
 */
    delete __pyx_v_s;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":481
 *             # assert len(words[-1]) == wlen
 *             #calculate line bbox
 *             w.getBBox(&bx1, &by1, &bx2, &by2)             # <<<<<<<<<<<<<<
 *             if bx1 < self.x1 or self.x1 == 0:
 *                 self.x1 = bx1
 */
    __pyx_v_w->getBBox((&__pyx_v_bx1), (&__pyx_v_by1), (&__pyx_v_bx2), (&__pyx_v_by2));

    /* "project/modules/utils/parsers/pdf/poppler.pyx":482
 *             #calculate line bbox
 *             w.getBBox(&bx1, &by1, &bx2, &by2)
 *             if bx1 < self.x1 or self.x1 == 0:             # <<<<<<<<<<<<<<
 *                 self.x1 = bx1
 *             if by1 < self.y1 or self.y1 == 0:
 */
    __pyx_t_9 = ((__pyx_v_bx1 < __pyx_v_self->x1) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_9 = ((__pyx_v_self->x1 == 0.0) != 0);
    __pyx_t_2 = __pyx_t_9;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_2) {

      /* "project/modules/utils/parsers/pdf/poppler.pyx":483
 *             w.getBBox(&bx1, &by1, &bx2, &by2)
 *             if bx1 < self.x1 or self.x1 == 0:
 *                 self.x1 = bx1             # <<<<<<<<<<<<<<
 *             if by1 < self.y1 or self.y1 == 0:
 *                 self.y1 = by1
 */
      __pyx_v_self->x1 = __pyx_v_bx1;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":482
 *             #calculate line bbox
 *             w.getBBox(&bx1, &by1, &bx2, &by2)
 *             if bx1 < self.x1 or self.x1 == 0:             # <<<<<<<<<<<<<<
 *                 self.x1 = bx1
 *             if by1 < self.y1 or self.y1 == 0:
 */
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":484
 *             if bx1 < self.x1 or self.x1 == 0:
 *                 self.x1 = bx1
 *             if by1 < self.y1 or self.y1 == 0:             # <<<<<<<<<<<<<<
 *                 self.y1 = by1
 *             if bx2 > self.x2:
 */
    __pyx_t_9 = ((__pyx_v_by1 < __pyx_v_self->y1) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_9 = ((__pyx_v_self->y1 == 0.0) != 0);
    __pyx_t_2 = __pyx_t_9;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_2) {

      /* "project/modules/utils/parsers/pdf/poppler.pyx":485
 *                 self.x1 = bx1
 *             if by1 < self.y1 or self.y1 == 0:
 *                 self.y1 = by1             # <<<<<<<<<<<<<<
 *             if bx2 > self.x2:
 *                 self.x2 = bx2
 */
      __pyx_v_self->y1 = __pyx_v_by1;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":484
 *             if bx1 < self.x1 or self.x1 == 0:
 *                 self.x1 = bx1
 *             if by1 < self.y1 or self.y1 == 0:             # <<<<<<<<<<<<<<
 *                 self.y1 = by1
 *             if bx2 > self.x2:
 */
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":486
 *             if by1 < self.y1 or self.y1 == 0:
 *                 self.y1 = by1
 *             if bx2 > self.x2:             # <<<<<<<<<<<<<<
 *                 self.x2 = bx2
 *             if by2 > self.y2:
 */
    __pyx_t_2 = ((__pyx_v_bx2 > __pyx_v_self->x2) != 0);
    if (__pyx_t_2) {

      /* "project/modules/utils/parsers/pdf/poppler.pyx":487
 *                 self.y1 = by1
 *             if bx2 > self.x2:
 *                 self.x2 = bx2             # <<<<<<<<<<<<<<
 *             if by2 > self.y2:
 *                 self.y2 = by2
 */
      __pyx_v_self->x2 = __pyx_v_bx2;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":486
 *             if by1 < self.y1 or self.y1 == 0:
 *                 self.y1 = by1
 *             if bx2 > self.x2:             # <<<<<<<<<<<<<<
 *                 self.x2 = bx2
 *             if by2 > self.y2:
 */
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":488
 *             if bx2 > self.x2:
 *                 self.x2 = bx2
 *             if by2 > self.y2:             # <<<<<<<<<<<<<<
 *                 self.y2 = by2
 *                 # add space after word if necessary
 */
    __pyx_t_2 = ((__pyx_v_by2 > __pyx_v_self->y2) != 0);
    if (__pyx_t_2) {

      /* "project/modules/utils/parsers/pdf/poppler.pyx":489
 *                 self.x2 = bx2
 *             if by2 > self.y2:
 *                 self.y2 = by2             # <<<<<<<<<<<<<<
 *                 # add space after word if necessary
 *             # if w.hasSpaceAfter():
 */
      __pyx_v_self->y2 = __pyx_v_by2;

      /* "project/modules/utils/parsers/pdf/poppler.pyx":488
 *             if bx2 > self.x2:
 *                 self.x2 = bx2
 *             if by2 > self.y2:             # <<<<<<<<<<<<<<
 *                 self.y2 = by2
 *                 # add space after word if necessary
 */
    }

    /* "project/modules/utils/parsers/pdf/poppler.pyx":492
 *                 # add space after word if necessary
 *             # if w.hasSpaceAfter():
 *             words.append(u' ')             # <<<<<<<<<<<<<<
 *             self._bboxes.append(BBox(last_bbox.x2, last_bbox.y1, last_bbox.x2, last_bbox.y2))
 *             w = w.getNext()
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_words, __pyx_kp_u__3); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 492, __pyx_L1_error)

    /* "project/modules/utils/parsers/pdf/poppler.pyx":493
 *             # if w.hasSpaceAfter():
 *             words.append(u' ')
 *             self._bboxes.append(BBox(last_bbox.x2, last_bbox.y1, last_bbox.x2, last_bbox.y2))             # <<<<<<<<<<<<<<
 *             w = w.getNext()
 *         self._text = u''.join(words)
 */
    if (unlikely(__pyx_v_self->_bboxes == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 493, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_last_bbox)) { __Pyx_RaiseUnboundLocalError("last_bbox"); __PYX_ERR(0, 493, __pyx_L1_error) }
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_last_bbox->x2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(!__pyx_v_last_bbox)) { __Pyx_RaiseUnboundLocalError("last_bbox"); __PYX_ERR(0, 493, __pyx_L1_error) }
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_last_bbox->y1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(!__pyx_v_last_bbox)) { __Pyx_RaiseUnboundLocalError("last_bbox"); __PYX_ERR(0, 493, __pyx_L1_error) }
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_last_bbox->x2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(!__pyx_v_last_bbox)) { __Pyx_RaiseUnboundLocalError("last_bbox"); __PYX_ERR(0, 493, __pyx_L1_error) }
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_last_bbox->y2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->_bboxes, __pyx_t_5); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "project/modules/utils/parsers/pdf/poppler.pyx":494
 *             words.append(u' ')
 *             self._bboxes.append(BBox(last_bbox.x2, last_bbox.y1, last_bbox.x2, last_bbox.y2))
 *             w = w.getNext()             # <<<<<<<<<<<<<<
 *         self._text = u''.join(words)
 * 
 */
    __pyx_v_w = __pyx_v_w->getNext();
  }

  /* "project/modules/utils/parsers/pdf/poppler.pyx":495
 *             self._bboxes.append(BBox(last_bbox.x2, last_bbox.y1, last_bbox.x2, last_bbox.y2))
 *             w = w.getNext()
 *         self._text = u''.join(words)             # <<<<<<<<<<<<<<
 * 
 *     property bbox:
 */
  __pyx_t_5 = PyUnicode_Join(__pyx_kp_u_, __pyx_v_words); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_text);
  __Pyx_DECREF(__pyx_v_self->_text);
  __pyx_v_self->_text = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":448
 *         # assert len(self._text) == len(self._bboxes)
 * 
 *     def _get_text(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextWord *w
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line._get_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_words);
  __Pyx_XDECREF((PyObject *)__pyx_v_last_bbox);
  __Pyx_XDECREF(__pyx_v_word);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":498
 * 
 *     property bbox:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BBox(self.x1, self.y1, self.x2, self.y2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":499
 *     property bbox:
 *         def __get__(self):
 *             return BBox(self.x1, self.y1, self.x2, self.y2)             # <<<<<<<<<<<<<<
 * 
 *     property text:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":498
 * 
 *     property bbox:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BBox(self.x1, self.y1, self.x2, self.y2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("project.modules.utils.parsers.pdf.poppler.Line.bbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":502
 * 
 *     property text:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._text
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":503
 *     property text:
 *         def __get__(self):
 *             return self._text             # <<<<<<<<<<<<<<
 * 
 *     property char_bboxes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_text);
  __pyx_r = __pyx_v_self->_text;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":502
 * 
 *     property text:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._text
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "project/modules/utils/parsers/pdf/poppler.pyx":506
 * 
 *     property char_bboxes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bboxes
 */

/* Python wrapper */
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes___get__(((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes___get__(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "project/modules/utils/parsers/pdf/poppler.pyx":507
 *     property char_bboxes:
 *         def __get__(self):
 *             return self._bboxes             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_bboxes);
  __pyx_r = __pyx_v_self->_bboxes;
  goto __pyx_L0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":506
 * 
 *     property char_bboxes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._bboxes
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7project_7modules_5utils_7parsers_3pdf_7poppler_Document __pyx_vtable_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Document(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)o);
  p->__pyx_vtab = __pyx_vtabptr_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;
  p->phys_layout = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Document(PyObject *o) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->phys_layout);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_Document(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)o;
  if (p->phys_layout) {
    e = (*v)(((PyObject*)p->phys_layout), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_Document(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)o;
  tmp = ((PyObject*)p->phys_layout);
  p->phys_layout = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_num_pages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9num_pages_1__get__(o);
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_max_pages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9max_pages_1__get__(o);
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Document[] = {
  {"get_metadata", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_5get_metadata, METH_NOARGS, 0},
  {"get_text", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_7get_text, METH_VARARGS|METH_KEYWORDS, 0},
  {"__resolution", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_9__resolution, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_image_format", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_11get_image_format, METH_O, 0},
  {"generate_thumbnail", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_13generate_thumbnail, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_page", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_17get_page, METH_O, 0},
  {"__next__", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_19__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Document[] = {
  {(char *)"num_pages", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_num_pages, 0, (char *)0, 0},
  {(char *)"max_pages", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_max_pages, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.Document", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_traverse*/
  __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_15__iter__, /*tp_iter*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_19__next__, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Document, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)o);
  p->doc = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage(PyObject *o) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->doc);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)o;
  if (p->doc) {
    e = (*v)(((PyObject*)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage *)o;
  tmp = ((PyObject*)p->doc);
  p->doc = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_page_no(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7page_no_1__get__(o);
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage[] = {
  {"__next__", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage[] = {
  {(char *)"page_no", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_page_no, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.PDFPage", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_traverse*/
  __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_5__iter__, /*tp_iter*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_7PDFPage_7__next__, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow[] = {
  {"__next__", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.Flow", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_3__iter__, /*tp_iter*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Flow_5__next__, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Block(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Block(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_bbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_4bbox_1__get__(o);
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Block[] = {
  {"__next__", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Block[] = {
  {(char *)"bbox", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_bbox, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Block = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.Block", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Block), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_3__iter__, /*tp_iter*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_5Block_5__next__, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Block, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_1__get__(o);
}

static int __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_1__get__(o);
}

static int __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2x2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_1__get__(o);
}

static int __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_1__get__(o);
}

static int __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_2y2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox[] = {
  {"as_tuple", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_3as_tuple, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox[] = {
  {(char *)"x1", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x1, __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x1, (char *)0, 0},
  {(char *)"x2", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x2, __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_x2, (char *)0, 0},
  {(char *)"y1", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y1, __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y1, (char *)0, 0},
  {(char *)"y2", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y2, __pyx_setprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_y2, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BBox = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BBox = {
  0, /*mp_length*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4BBox_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.BBox", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BBox, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BBox, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Line(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)o);
  p->_text = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_bboxes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Line(PyObject *o) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_text);
  Py_CLEAR(p->_bboxes);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_Line(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)o;
  if (p->_bboxes) {
    e = (*v)(p->_bboxes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_Line(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line *)o;
  tmp = ((PyObject*)p->_bboxes);
  p->_bboxes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_bbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4bbox_1__get__(o);
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_text(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_4text_1__get__(o);
}

static PyObject *__pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_char_bboxes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_11char_bboxes_1__get__(o);
}

static PyMethodDef __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Line[] = {
  {"_get_text", (PyCFunction)__pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_5_get_text, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Line[] = {
  {(char *)"bbox", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_bbox, 0, (char *)0, 0},
  {(char *)"text", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_text, 0, (char *)0, 0},
  {(char *)"char_bboxes", __pyx_getprop_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_char_bboxes, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Line = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.Line", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Line), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_traverse*/
  __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7project_7modules_5utils_7parsers_3pdf_7poppler_4Line_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler_Line, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *__pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text[8];
static int __pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text = 0;

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text)))) {
    o = (PyObject*)__pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text[--__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text];
    memset(o, 0, sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(PyObject *o) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_bad_characters);
  Py_CLEAR(p->__pyx_v_word_aux);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text)))) {
    __pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text[__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text++] = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)o;
  if (p->__pyx_v_bad_characters) {
    e = (*v)(p->__pyx_v_bad_characters, a); if (e) return e;
  }
  if (p->__pyx_v_word_aux) {
    e = (*v)(p->__pyx_v_word_aux, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)o;
  tmp = ((PyObject*)p->__pyx_v_bad_characters);
  p->__pyx_v_bad_characters = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_word_aux);
  p->__pyx_v_word_aux = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.__pyx_scope_struct___get_text", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text, /*tp_traverse*/
  __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *__pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr[--__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr[__pyx_freecount_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_c);
  p->__pyx_v_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "project.modules.utils.parsers.pdf.poppler.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "poppler",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_s_Author, __pyx_k_Author, sizeof(__pyx_k_Author), 0, 0, 1, 1},
  {&__pyx_n_s_Cc, __pyx_k_Cc, sizeof(__pyx_k_Cc), 0, 0, 1, 1},
  {&__pyx_n_s_Cf, __pyx_k_Cf, sizeof(__pyx_k_Cf), 0, 0, 1, 1},
  {&__pyx_n_s_Cn, __pyx_k_Cn, sizeof(__pyx_k_Cn), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_NFD, __pyx_k_NFD, sizeof(__pyx_k_NFD), 0, 0, 1, 1},
  {&__pyx_n_s_So, __pyx_k_So, sizeof(__pyx_k_So), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_Title, __pyx_k_Title, sizeof(__pyx_k_Title), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_block, __pyx_k_block, sizeof(__pyx_k_block), 0, 0, 1, 1},
  {&__pyx_n_s_category, __pyx_k_category, sizeof(__pyx_k_category), 0, 0, 1, 1},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_pitch, __pyx_k_fixed_pitch, sizeof(__pyx_k_fixed_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_flow, __pyx_k_flow, sizeof(__pyx_k_flow), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_image_format, __pyx_k_get_image_format, sizeof(__pyx_k_get_image_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_page, __pyx_k_get_page, sizeof(__pyx_k_get_page), 0, 0, 1, 1},
  {&__pyx_n_s_get_text, __pyx_k_get_text, sizeof(__pyx_k_get_text), 0, 0, 1, 1},
  {&__pyx_n_s_get_text_locals_genexpr, __pyx_k_get_text_locals_genexpr, sizeof(__pyx_k_get_text_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_image_format, __pyx_k_image_format, sizeof(__pyx_k_image_format), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_jpeg, __pyx_k_jpeg, sizeof(__pyx_k_jpeg), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max_pages, __pyx_k_max_pages, sizeof(__pyx_k_max_pages), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_num_pages, __pyx_k_num_pages, sizeof(__pyx_k_num_pages), 0, 0, 1, 1},
  {&__pyx_n_s_page, __pyx_k_page, sizeof(__pyx_k_page), 0, 0, 1, 1},
  {&__pyx_n_s_page_no, __pyx_k_page_no, sizeof(__pyx_k_page_no), 0, 0, 1, 1},
  {&__pyx_n_s_pages, __pyx_k_pages, sizeof(__pyx_k_pages), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pg, __pyx_k_pg, sizeof(__pyx_k_pg), 0, 0, 1, 1},
  {&__pyx_n_s_phys_layout, __pyx_k_phys_layout, sizeof(__pyx_k_phys_layout), 0, 0, 1, 1},
  {&__pyx_n_s_png, __pyx_k_png, sizeof(__pyx_k_png), 0, 0, 1, 1},
  {&__pyx_n_s_project_modules_utils_parsers_pd, __pyx_k_project_modules_utils_parsers_pd, sizeof(__pyx_k_project_modules_utils_parsers_pd), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_scale_to_x, __pyx_k_scale_to_x, sizeof(__pyx_k_scale_to_x), 0, 0, 1, 1},
  {&__pyx_n_s_scale_to_y, __pyx_k_scale_to_y, sizeof(__pyx_k_scale_to_y), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_unichr, __pyx_k_unichr, sizeof(__pyx_k_unichr), 0, 0, 1, 1},
  {&__pyx_n_s_unicodedata, __pyx_k_unicodedata, sizeof(__pyx_k_unicodedata), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_x_scale_to, __pyx_k_x_scale_to, sizeof(__pyx_k_x_scale_to), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_y_scale_to, __pyx_k_y_scale_to, sizeof(__pyx_k_y_scale_to), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 213, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 213, __pyx_L1_error)
  #endif
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_builtin_unichr = __Pyx_GetBuiltinName(__pyx_n_s_unichr); if (!__pyx_builtin_unichr) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 463, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpoppler(void); /*proto*/
PyMODINIT_FUNC initpoppler(void)
#else
PyMODINIT_FUNC PyInit_poppler(void); /*proto*/
PyMODINIT_FUNC PyInit_poppler(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  GlobalParams *__pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_poppler(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("poppler", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_project__modules__utils__parsers__pdf__poppler) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "project.modules.utils.parsers.pdf.poppler")) {
      if (unlikely(PyDict_SetItemString(modules, "project.modules.utils.parsers.pdf.poppler", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7project_7modules_5utils_7parsers_3pdf_7poppler_Document = &__pyx_vtable_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;
  __pyx_vtable_7project_7modules_5utils_7parsers_3pdf_7poppler_Document.render_page = (void (*)(struct __pyx_obj_7project_7modules_5utils_7parsers_3pdf_7poppler_Document *, int, OutputDev *))__pyx_f_7project_7modules_5utils_7parsers_3pdf_7poppler_8Document_render_page;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document.tp_dict, __pyx_vtabptr_7project_7modules_5utils_7parsers_3pdf_7poppler_Document) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Document", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Document = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Document;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PDFPage", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_PDFPage;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Flow", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Flow;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Block) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Block.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Block", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Block) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Block = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Block;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BBox", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_BBox;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Line) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Line.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Line", (PyObject *)&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Line) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler_Line = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler_Line;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text.tp_print = 0;
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct___get_text;
  if (PyType_Ready(&__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr = &__pyx_type_7project_7modules_5utils_7parsers_3pdf_7poppler___pyx_scope_struct_1_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(1, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(2, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(3, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "project/modules/utils/parsers/pdf/poppler.pyx":2
 * # -*- coding: utf-8 -*-
 * from unicodedata import normalize, category             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * from cpython cimport bool as PyBool
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_normalize);
  __Pyx_GIVEREF(__pyx_n_s_normalize);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_normalize);
  __Pyx_INCREF(__pyx_n_s_category);
  __Pyx_GIVEREF(__pyx_n_s_category);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_category);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_unicodedata, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_normalize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalize, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_category); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_category, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":6
 * from cpython cimport bool as PyBool
 * from cpython.object cimport Py_EQ, Py_NE
 * from math import ceil             # <<<<<<<<<<<<<<
 * 
 * ctypedef bool GBool
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ceil);
  __Pyx_GIVEREF(__pyx_n_s_ceil);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ceil);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ceil); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ceil, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":17
 *         # GBool getOverprintPreview()
 *         # we need to init globalParams - just one during program run
 * globalParams = new GlobalParams()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_3 = new GlobalParams();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 17, __pyx_L1_error)
  }
  globalParams = __pyx_t_3;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":168
 * 
 * 
 * cdef double RESOLUTION = 72.0             # <<<<<<<<<<<<<<
 * 
 * cdef class Document:
 */
  __pyx_v_7project_7modules_5utils_7parsers_3pdf_7poppler_RESOLUTION = 72.0;

  /* "project/modules/utils/parsers/pdf/poppler.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * from unicodedata import normalize, category
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init project.modules.utils.parsers.pdf.poppler", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init project.modules.utils.parsers.pdf.poppler");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* None */
        static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetItemInt */
        static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* decode_c_string */
        static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SetVTable */
        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value) {
    const Unicode neg_one = (Unicode) -1, const_zero = (Unicode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Unicode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Unicode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Unicode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Unicode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__SplashImageFileFormat(enum SplashImageFileFormat value) {
    const enum SplashImageFileFormat neg_one = (enum SplashImageFileFormat) -1, const_zero = (enum SplashImageFileFormat) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum SplashImageFileFormat) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum SplashImageFileFormat) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum SplashImageFileFormat) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum SplashImageFileFormat) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum SplashImageFileFormat) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum SplashImageFileFormat),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum SplashImageFileFormat __Pyx_PyInt_As_enum__SplashImageFileFormat(PyObject *x) {
    const enum SplashImageFileFormat neg_one = (enum SplashImageFileFormat) -1, const_zero = (enum SplashImageFileFormat) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum SplashImageFileFormat) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum SplashImageFileFormat) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum SplashImageFileFormat) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum SplashImageFileFormat) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) >= 2 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((((enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum SplashImageFileFormat) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) >= 3 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((((((enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum SplashImageFileFormat) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) >= 4 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((((((((enum SplashImageFileFormat)digits[3]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum SplashImageFileFormat) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum SplashImageFileFormat) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SplashImageFileFormat, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum SplashImageFileFormat) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SplashImageFileFormat, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum SplashImageFileFormat) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum SplashImageFileFormat) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 2 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((enum SplashImageFileFormat)-1)*(((((enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum SplashImageFileFormat) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 2 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) ((((((enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum SplashImageFileFormat) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 3 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((enum SplashImageFileFormat)-1)*(((((((enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum SplashImageFileFormat) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 3 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) ((((((((enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum SplashImageFileFormat) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 4 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) (((enum SplashImageFileFormat)-1)*(((((((((enum SplashImageFileFormat)digits[3]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum SplashImageFileFormat) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum SplashImageFileFormat, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum SplashImageFileFormat) - 1 > 4 * PyLong_SHIFT) {
                            return (enum SplashImageFileFormat) ((((((((((enum SplashImageFileFormat)digits[3]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[2]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[1]) << PyLong_SHIFT) | (enum SplashImageFileFormat)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum SplashImageFileFormat) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SplashImageFileFormat, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum SplashImageFileFormat) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum SplashImageFileFormat, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum SplashImageFileFormat val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum SplashImageFileFormat) -1;
        }
    } else {
        enum SplashImageFileFormat val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum SplashImageFileFormat) -1;
        val = __Pyx_PyInt_As_enum__SplashImageFileFormat(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum SplashImageFileFormat");
    return (enum SplashImageFileFormat) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum SplashImageFileFormat");
    return (enum SplashImageFileFormat) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
        static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
        #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
            static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
            #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
            static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
